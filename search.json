[{"path":"https://ashbythorpe.github.io/selenider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 selenider authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer.","code":""},{"path":"https://ashbythorpe.github.io/selenider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2023). selenider: Concise, lazy asynchronous wrapper 'RSelenium'. https://github.com/ashbythorpe/selenider, https://ashbythorpe.github.io/selenider/.","code":"@Manual{,   title = {selenider: Concise, lazy and asynchronous wrapper for 'RSelenium'},   author = {Ashby Thorpe},   year = {2023},   note = {https://github.com/ashbythorpe/selenider, https://ashbythorpe.github.io/selenider/}, }"},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"selenider","dir":"","previous_headings":"","what":"Concise, lazy and asynchronous wrapper for RSelenium","title":"Concise, lazy and asynchronous wrapper for RSelenium","text":"selenider aims make web testing scraping using Selenium much simpler. inspired Java’s Selenide Python’s Selene. provides following features: elements lazy, meaning actually collect element absolutely necessary. Automatic implicit waiting, meaning functions automatically wait certain amount time (default, 4 seconds) performing action . API designed use pipe operator (|> %>%). quick concise way specify test expectations.","code":""},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Concise, lazy and asynchronous wrapper for RSelenium","text":"can install development version selenider like :","code":"# install.packages(\"remotes\") remotes::install_github(\"ashbythorpe/selenider\")"},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Concise, lazy and asynchronous wrapper for RSelenium","text":"use selenider, first create session. session object stored globally, don’t need pass subsequent functions. navigate website, use open_url() Use html_element() select element. default, CSS selectors used, options available. However, concise way, allows skip specifying session, using s(). code can translated : functions can chained find child elements, providing much nicer syntax complex XPaths. want select matching HTML elements rather just one, use ss() html_elements(). Note unless something elements, actually collected website. (Todo: Element specific actions e.g. click) selenider provides concise testing interface using html_expect() function. Provide element, one conditions, function wait conditions met. session’s timeout reached, function provide informative error message. (&&), (||) (!) can used conditions logical values. html_expect() accepts functions (is_present) calls (is_present()), allowing expectations defined multiple elements. Note first argument html_expect() can element condition. (Todo: Link documentation conditions)","code":"library(selenider)  session <- selenider_session(\"firefox\")  session #> A selenider session object #> • Open for 0s #> • Browser: \"firefox\" #> • Port: 4567 #> • Currently opened: Nothing #> • Timeout: 4s open_url(\"https://www.google.com/\") html_element(session, \".myclass\") #> A selenider element selecting: #> The first element with css selector \".myclass\"  html_element(session, xpath = \"//div/a\") #> A selenider element selecting: #> The first element with xpath \"//div/a\" s(\".myclass\") #> A selenider element selecting: #> The first element with css selector \".myclass\"  s(\"//div/a\") #> A selenider element selecting: #> The first element with xpath \"//div/a\" s(\".myclass\") |>   html_element(class_name = \"mydiv\") |>   html_element(\"#mychild\") #> A selenider element selecting: #> • The first element with css selector \".myclass\" #> • The first child element with class name \"mydiv\" #> • The first child element with css selector \"#mychild\" # Select all <div> elements ss(\"div\") #> A collection of selenider elements selecting: #> The elements with css selector \"div\"  s(\".myclass\") |>   html_element(\".mychild\") |>   html_elements(\".multiplechild\") #> A selenider element selecting: #> • The first element with css selector \".myclass\" #> • The first child element with css selector \".mychild\" #> • The child elements with css selector \".multiplechild\" # Check that an element exists s(\".myclass\") |>   html_expect(is_present)  # Whoops! This element is not visible! s(\".invisible\") |>    html_expect(is_visible) #> Error in `html_expect()`: #> ! Condition failed after waiting for 4 seconds: #> `is_visible` #> Run `rlang::last_trace()` to see where the error occurred.  # Check that an element is visible and enabled s(\".myclass\") |>   html_element(\"#mychild\") |>   html_expect(is_visible, is_enabled) # Check that an element doesn't exist s(\".myclass\") |>   html_expect(!is_present)  # Check that an element is visible or enabled s(\".myclass\") |>   html_expect(is_visible || is_enabled) elem_1 <- s(\".class1\")  elem_2 <- s(\".class2\")  # Test that either the first or second element exists html_expect(is_present(elem_1) || is_present(elem_2))"},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a difftime — as_pretty_dt","title":"Format a difftime — as_pretty_dt","text":"Internal method used print selenider_session() object. Designed used prettyunits::pretty_dt(), prettyunits::pretty_ms() prettyunits::pretty_sec().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a difftime — as_pretty_dt","text":"","code":"as_pretty_dt(x)  cli_format.pretty_dt(x, style = NULL, ...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a difftime — as_pretty_dt","text":"x string representing difftime. style, ... used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a difftime — as_pretty_dt","text":"object class pretty_dt.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a difftime — as_pretty_dt","text":"","code":"x <- as_pretty_dt(prettyunits::pretty_sec(10))  cli::cli_text(\"{.val x}\") #> \"x\""},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":null,"dir":"Reference","previous_headings":"","what":"Move back or forward in browsing history — back","title":"Move back or forward in browsing history — back","text":"back() navigates previously opened URL, previously opened page browsing history. forward() reverses action back(), going next page browsing history.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move back or forward in browsing history — back","text":"","code":"back(session = NULL)  forward(session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move back or forward in browsing history — back","text":"session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move back or forward in browsing history — back","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move back or forward in browsing history — back","text":"","code":"session <- mock_selenider_session()  open_url(\"https://www.google.com\") #> Error in create_server(browser, version, quiet, server_args): The server of the session could not be started. #> Caused by error in `chrome_ver()`: #> ! version requested doesnt match versions available = 113.0.5672.63,114.0.5735.16,114.0.5735.90  open_url(\"https://www.tidyverse.org/\") #> Error in create_client(browser, client_args): We could not determine whether the server was successfully started after #> 5 attempts. #> Caused by error in `checkError()`: #> ! Undefined error in httr call. httr output: Failed to connect to localhost port 4567 after 0 ms: Connection refused  back() #> Error in create_client(browser, client_args): We could not determine whether the server was successfully started after #> 5 attempts. #> Caused by error in `checkError()`: #> ! Undefined error in httr call. httr output: Failed to connect to localhost port 4567 after 0 ms: Connection refused  forward() #> Error in create_client(browser, client_args): We could not determine whether the server was successfully started after #> 5 attempts. #> Caused by error in `checkError()`: #> ! Undefined error in httr call. httr output: Failed to connect to localhost port 4567 after 0 ms: Connection refused"},{"path":"https://ashbythorpe.github.io/selenider/reference/click.html","id":null,"dir":"Reference","previous_headings":"","what":"Click an element — click","title":"Click an element — click","text":"Clicks HTML element, either simulating mouse click triggering element's \"click\" event. click() left clicks element, double_click() left clicks element two times short period time, right_click() right clicks element, opening context menu.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/click.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Click an element — click","text":"","code":"click(x, js = FALSE, timeout = NULL)  double_click(x, js = FALSE, timeout = NULL)  right_click(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/click.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Click an element — click","text":"x selenider_element object. js Whether click element using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/click.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Click an element — click","text":"x, invisibly","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/click.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Click an element — click","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   click() #> Error in create_client(browser, client_args): We could not determine whether the server was successfully started after #> 5 attempts. #> Caused by error in `checkError()`: #> ! Undefined error in httr call. httr output: Failed to connect to localhost port 4567 after 0 ms: Connection refused"},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a session object — close_session","title":"Close a session object — close_session","text":"Shut session object, closing browser stopping server.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a session object — close_session","text":"","code":"close_session(x = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a session object — close_session","text":"x selenider_session object. omitted, global session object closed.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close a session object — close_session","text":"Nothing.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close a session object — close_session","text":"","code":"session <- mock_selenider_session(local = FALSE)  close_session(session)  # Reopen the session, this time letting it be set locally. session <- mock_selenider_session()  # We don't have to specify the session if it is set locally. close_session() #> Error in x$driver$close(): attempt to apply non-function  # Since we already closed `session`, we don't need the deferred events to # run withr::deferred_clear()"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_webelement.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the webElement associated with a selenider element — get_actual_webelement","title":"Get the webElement associated with a selenider element — get_actual_webelement","text":"Turn lazy selenium element element collection RSelenium::webElement. Use perform certain actions element implemented selenider (e.g. getElementLocation()) get_actual_webelement() turns selenider_element object RSelenium::webElement object. function wait object exist DOM. get_actual_webelements() turns selenider_elements object list RSelenium::webElement objects.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_webelement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the webElement associated with a selenider element — get_actual_webelement","text":"","code":"get_actual_webelement(x, timeout = NULL)  get_actual_webelements(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_webelement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the webElement associated with a selenider element — get_actual_webelement","text":"x selenider_element selenider_elements object, produced html_element() / html_elements() timeout timeout use asserting item exists. NULL, timeout selenider_element used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_webelement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the webElement associated with a selenider element — get_actual_webelement","text":"RSelenium::webElement object, list objects.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_webelement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the webElement associated with a selenider element — get_actual_webelement","text":"","code":"session <- mock_selenider_session()  elem <- s(\".class1\") |>   get_actual_webelement() #> Error in create_client(browser, client_args): We could not determine whether the server was successfully started after #> 5 attempts. #> Caused by error in `checkError()`: #> ! Undefined error in httr call. httr output: Failed to connect to localhost port 4567 after 0 ms: Connection refused  elem$getElementLocation() #> Error in eval(expr, envir, enclos): object 'elem' not found  elems <- ss(\".class2\") |>   get_actual_webelements() #> Error in create_client(browser, client_args): We could not determine whether the server was successfully started after #> 5 attempts. #> Caused by error in `checkError()`: #> ! Undefined error in httr call. httr output: Failed to connect to localhost port 4567 after 0 ms: Connection refused  elems[[1]]$getElementSize() #> Error in eval(expr, envir, enclos): object 'elems' not found"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the local selenider session — get_session","title":"Get or set the local selenider session — get_session","text":"Change locally defined selenider_session() object, allowing used functions like s() without explicitly providing . get_session() retrieves current local session. none created, session created automatically. local_session() sets local session. function uses withr::defer() make sure session closed local session set previous value longer needed. with_session() runs code temporary local session. session closed local session set previous value code finishes executing.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the local selenider session — get_session","text":"","code":"get_session(create = TRUE, .env = rlang::caller_env())  local_session(session, .local_envir = rlang::caller_env(), close = TRUE)  with_session(session, code, close = TRUE)"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the local selenider session — get_session","text":"create session found, create new one? FALSE session found, NULL returned. .env get_session() creates session, environment session used. session selenider_session() object use. .local_envir environment session used. function associated environment finishes execution, session reset. close close session local session reset? Set FALSE want use session even longer local session. want close session manually, use close_session(). code code run local session set.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the local selenider session — get_session","text":"get_session() returns local selenider_session() object (newly created session). local_session() returns previous local session object (NULL). running get_session() function. with_session() returns result code.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the local selenider session — get_session","text":"Use withr::deferred_run() reset local sessions set using local_session().","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the local selenider session — get_session","text":"","code":"# Don't set the local session, since we want to do it manually. session_1 <- mock_selenider_session(local = FALSE) session_2 <- mock_selenider_session(local = FALSE)  get_session(create = FALSE) # NULL #> NULL  local_session(session_1)  get_session(create = FALSE) #> NULL  withr::deferred_run()  get_session(create = FALSE) # NULL #> NULL  # By default, the local session is only set inside the function that it is # called. # If we want to set the local session outside the scope of a function, we # need to use the `.local_envir` argument. set_my_session <- function(env = rlang::caller_env()) {   # caller_env() is the environment where the function is called.   local_session(session_1, .local_envir = env) }  set_my_session()  with_session(   session_2,   {get_session(create = FALSE)} ) # session_2 #> A selenider session object #> • Open for 11ms #> • Browser: \"chrome\" #> • Port: 0 #> • Currently opened: Nothing #> • Timeout: 4s  get_session(create = FALSE) # session_1 #> A selenider session object #> • Open for 54ms #> • Browser: \"chrome\" #> • Port: 0 #> • Currently opened: Nothing #> • Timeout: 4s"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element's attribute match a value? — has_attr","title":"Does an element's attribute match a value? — has_attr","text":"has_attr() checks element's attribute matches value, attr_contains() checks element's attribute contains value. has_value() shortcut has_attr(\"value\"): checks element's value matches string number.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element's attribute match a value? — has_attr","text":"","code":"has_attr(x, name, value)  attr_contains(x, name, value)  has_value(x, value)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element's attribute match a value? — has_attr","text":"x selenider_element object. name name attribute. value value attribute. has_attr() has_value(), can string numeric value, attr_contains() can take string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element's attribute match a value? — has_attr","text":"boolean value: TRUE FALSE.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element's attribute match a value? — has_attr","text":"","code":"session <- mock_selenider_session()  has_attr(s(\".class1\"), \"class\", \"class1\") #> [1] FALSE"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element's css property match a value? — has_css_property","title":"Does an element's css property match a value? — has_css_property","text":"Check CSS property (e.g. \"background-color\") element matches value.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element's css property match a value? — has_css_property","text":"","code":"has_css_property(x, property, value)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element's css property match a value? — has_css_property","text":"x selenider_element object. property name CSS property value value attribute.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element's css property match a value? — has_css_property","text":"boolean value: TRUE FALSE.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element's css property match a value? — has_css_property","text":"","code":"session <- mock_selenider_session()  has_css_property(s(\".class1\"), \"background-color\", \"red\") #> [1] FALSE"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a collection have a certain number of elements? — has_length","title":"Does a collection have a certain number of elements? — has_length","text":"has_length() has_size() checks collection HTML elements contains certain number elements.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a collection have a certain number of elements? — has_length","text":"","code":"has_length(x, n)  has_size(x, n)  has_at_least(x, n)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a collection have a certain number of elements? — has_length","text":"x selenider_elements object. n numeric vector possible lengths x. has_at_least(), must single number compare length x.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a collection have a certain number of elements? — has_length","text":"boolean value: TRUE FALSE","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does a collection have a certain number of elements? — has_length","text":"has_at_least() checks collection contains least n elements. functions implement retry mechanism, test condition . Use html_expect() html_wait_until() use conditions tests.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a collection have a certain number of elements? — has_length","text":"","code":"session <- mock_selenider_session()  has_length(ss(\".class1\"), 2) #> [1] FALSE"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element have a tag name? — has_name","title":"Does an element have a tag name? — has_name","text":"Check element specified tag name","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element have a tag name? — has_name","text":"","code":"has_name(x, name)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element have a tag name? — has_name","text":"x selenider_element object. name string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element have a tag name? — has_name","text":"boolean value.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element have a tag name? — has_name","text":"","code":"session <- mock_selenider_session()  has_name(s(\".class1\"), \"div\") #> logical(0)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element contain a pattern? — has_text","title":"Does an element contain a pattern? — has_text","text":"has_text() checks element's inner text contains string, has_exact_text() checks inner text contains string. functions throw error element exist DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element contain a pattern? — has_text","text":"","code":"has_text(x, text)  has_exact_text(x, text)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element contain a pattern? — has_text","text":"x selenider_element object. text string, used test element's inner text.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element contain a pattern? — has_text","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does an element contain a pattern? — has_text","text":"functions implement retry mechanism, test condition . Use html_expect() html_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element contain a pattern? — has_text","text":"","code":"session <- mock_selenider_session()  has_text(s(\".class1\"), \"Example\") #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/selenider/reference/hover.html","id":null,"dir":"Reference","previous_headings":"","what":"Hover over an element — hover","title":"Hover over an element — hover","text":"Move mouse HTML element hover , without actually clicking interacting .","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/hover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hover over an element — hover","text":"","code":"hover(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/hover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hover over an element — hover","text":"x selenider_element object. js Whether hover element using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/hover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hover over an element — hover","text":"x, invisibly","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/hover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hover over an element — hover","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   hover()"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the family elements of an element — html_ancestors","title":"Get the family elements of an element — html_ancestors","text":"Find elements certain relative position HTML element. html_ancestors() selects every element contains current element (children, grand-children, etc.). html_parent() selects element contains current element. html_siblings() selects every element parent current element. html_children() selects every element connected directly current element. html_descendants() selects every element contained current element. current element direct parent, must type ancestor.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the family elements of an element — html_ancestors","text":"","code":"html_ancestors(x)  html_parent(x)  html_siblings(x)  html_children(x)  html_descendants(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the family elements of an element — html_ancestors","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the family elements of an element — html_ancestors","text":"functions return selenider_elements object, except html_parent(), returns selenider_element object (since element can one parent).","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get element attribute — html_attr","title":"Get element attribute — html_attr","text":"Get attribute selenider_element object. html_attr() returns single attribute value string. html_attrs() returns named list containing every attribute. html_value() returns 'value' attribute.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get element attribute — html_attr","text":"","code":"html_attr(x, name, default = NA_character_, timeout = NULL)  html_attrs(x, timeout = NULL)  html_value(x, ptype = character(), timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get element attribute — html_attr","text":"x selenider_element object. name name attribute get; string. default default value use attribute exist element. timeout time wait x exist. ptype type cast value . Useful value integer decimal number. default, value returned string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get element attribute — html_attr","text":"html_attr() returns character vector length 1. html_attrs() returns named list strings. return value html_value() type ptype length 1.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get element attribute — html_attr","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   html_attr(\"href\") #> [1] NA"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_css_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a CSS property of an element — html_css_property","title":"Get a CSS property of an element — html_css_property","text":"Get CSS property element (e.g. \"background-color\").","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_css_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a CSS property of an element — html_css_property","text":"","code":"html_css_property(x, name, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_css_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a CSS property of an element — html_css_property","text":"x selenider_element object. name name CSS property get. timeout time wait x exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_css_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a CSS property of an element — html_css_property","text":"string, NA property exist.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_css_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a CSS property of an element — html_css_property","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   html_css_property(\"background-color\") #> [1] NA"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single HTML element — html_element","title":"Get a single HTML element — html_element","text":"Find first HTML element using CSS selector, XPath, variety methods.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single HTML element — html_element","text":"","code":"html_element(x, ...)  # S3 method for selenider_session html_element(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )  # S3 method for selenider_element html_element(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single HTML element — html_element","text":"x selenider session element. ... Arguments passed methods. css css selector. xpath XPath. id id element want select. class_name class name element want select. name name attribute element want select. link_text link text link element like select.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single HTML element — html_element","text":"selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_element.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a single HTML element — html_element","text":"one method used select element (e.g. css xpath), first element satisfies conditions found.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single HTML element — html_element","text":"","code":"session <- mock_selenider_session()  session |>   html_element(\".class1\") #> A selenider element selecting: #> The first element with css \".class1\"  session |>   html_element(\".class1\") |>   html_element(\".class2\") #> A selenider element selecting: #> • The first element with css \".class1\" #> • The first child element with css \".class2\"    # The above can be shortened to: s(\".class1\") |>   html_element(\".class2\") #> A selenider element selecting: #> • The first element with css \".class1\" #> • The first child element with css \".class2\""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get multiple HTML elements — html_elements","title":"Get multiple HTML elements — html_elements","text":"Find every available HTML element using CSS selector, XPath, variety methods.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get multiple HTML elements — html_elements","text":"","code":"html_elements(x, ...)  # S3 method for selenider_session html_elements(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )  # S3 method for selenider_element html_elements(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get multiple HTML elements — html_elements","text":"x selenider session element. ... Arguments passed methods. css css selector. xpath XPath. id id element want select. class_name class name element want select. name name attribute element want select. link_text link text link element like select.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get multiple HTML elements — html_elements","text":"selenider_elements object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get multiple HTML elements — html_elements","text":"one method used select element (e.g. css xpath), first element satisfies every condition found.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get multiple HTML elements — html_elements","text":"","code":"session <- mock_selenider_session()  session |>   html_elements(\".class1\") #> A collection of selenider elements selecting: #> The elements with css selector \".class1\"  # Or: ss(\".class1\") #> A collection of selenider elements selecting: #> The elements with css selector \".class1\"  session |>   html_element(\".class1\") |>   html_elements(\".class2\") #> A collection of selenider elements selecting: #> • The first element with css \".class1\" #> • The child elements with css selector \".class2\"    # The above can be shortened to: s(\".class1\") |>   html_elements(\".class2\") #> A collection of selenider elements selecting: #> • The first element with css \".class1\" #> • The child elements with css selector \".class2\""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":null,"dir":"Reference","previous_headings":"","what":"Test one or more conditions on HTML elements — html_expect","title":"Test one or more conditions on HTML elements — html_expect","text":"html_expect() waits set conditions return TRUE. , certain period time (default 4 seconds), happen, informative error thrown. Otherwise, original element returned. html_wait_until() , returns logical value (whether test passed), allowing handle failure case explicitly.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test one or more conditions on HTML elements — html_expect","text":"","code":"html_expect(x, ..., testthat = NULL, timeout = NULL)  html_wait_until(x, ..., timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test one or more conditions on HTML elements — html_expect","text":"x selenider_element/selenider_elements object, condition. ... <dynamic-dots> Function calls functions must return logical value. multiple conditions given, must TRUE test pass. testthat Whether treat expectation testthat test. need explicitly provide time, since default, can use testthat::is_testing() figure whether html_expect() called within testthat test. timeout number seconds wait condition pass. specified, timeout used x used, timeout local session element given.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test one or more conditions on HTML elements — html_expect","text":"html_expect() returns element(s) x, NULL element collection elements given x. html_wait_for() returns boolean flag: TRUE test passes, FALSE otherwise.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":"conditions","dir":"Reference","previous_headings":"","what":"Conditions","title":"Test one or more conditions on HTML elements — html_expect","text":"Conditions can supplied functions calls. Functions allow use unary conditions without formatting call (e.g. is_present rather is_present()). also allows make use R's anonymous function syntax quickly create custom conditions. x used first argument function. Function calls allow use conditions take multiple arguments (e.g. has_text()) without use intermediate function. call modified x first argument function call. example, has_text(\"\") modified become: has_text(x, \"\"). (&&), (||) (!) functions can used types conditions. one condition given ..., combined using &&.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":"custom-conditions","dir":"Reference","previous_headings":"","what":"Custom conditions","title":"Test one or more conditions on HTML elements — html_expect","text":"function takes selenider element element collection first argument, returns logical value, can used condition. Additionally, functions provide features make creating custom conditions easy: Errors class selenider_element_absent_element handled, function prevented terminating early. means element found, function retry instead immediately throwing error. selenider functions used inside conditions timeout, default, set 0, ignoring local timeout. important, since html_expect() html_wait_until() implement retry mechanic manually. override default, manually specify timeout. two features allow use functions like html_text() access properties element, without needing worry errors throw timeouts use. See Examples example custom condition. custom conditions can also used html_filter() html_find().","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test one or more conditions on HTML elements — html_expect","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   html_expect(is_present) #> A selenider element selecting: #> The first element with css \".class1\"  s(\".class1\") |>   html_expect(is_visible, is_enabled) #> A selenider element selecting: #> The first element with css \".class1\"  s(\".class1\") |>   html_expect(is_visible || is_enabled) #> A selenider element selecting: #> The first element with css \".class1\"  s(\".class2\") |>   html_expect(!is_present) |>   try() # Since this condition will fail #> Error in diagnose_condition(x, n, new_call, original_expr, result, timeout,  :  #>   argument \"testthat\" is missing, with no default # Or is_absent, etc.  # html_expect() returns the element, so can be used in chains s(\".button1\") |>   html_expect(is_visible) |>   click() # Note that click() will do this automatically  s(\".text1\") |>   html_expect(has_exact_text(\"Example text\")) #> A selenider element selecting: #> The first element with css \".text1\"  # Or use an anonymous function s(\".text1\") |>   html_expect(\\(elem) identical(html_text(elem), \"Example text\")) #> A selenider element selecting: #> The first element with css \".text1\"  # If your conditions are not specific to an element, you can omit the `x` argument elem_1 <- s(\".class1\") elem_2 <- s(\".class2\")  html_expect(is_present(elem_1) || is_present(elem_2)) #> NULL  # We can now use the conditions on their own to figure out which element exists if (is_present(elem_1)) {   click(elem_1) } else {   click(elem_2) }  # Use html_wait_for() to handle failures manually elem <- s(\".class2\") if (html_wait_until(elem, is_present)) {   click(elem) } else {   reload() }  # Creating a custom condition is easiest with an anonymous function s(\".text1\") |>   html_expect(     \\(elem) elem |>       html_text() |>       grepl(pattern = \"Example .*\")   ) #> A selenider element selecting: #> The first element with css \".text1\"  # Or create a function, to reuse the condition multiple times text_contains <- function(x, pattern) {   text <- html_text(x)      grepl(pattern, text) }  s(\".text1\") |>   html_expect(text_contains(\"Example *\")) #> A selenider element selecting: #> The first element with css \".text1\""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test conditions on multiple elements — html_expect_all","title":"Test conditions on multiple elements — html_expect_all","text":"html_expect_all() html_wait_until_all() complements html_expect() html_wait_until() test conditions multiple elements element collection.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test conditions on multiple elements — html_expect_all","text":"","code":"html_expect_all(x, ..., testthat = NULL, timeout = NULL)  html_wait_until_all(x, ..., timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test conditions on multiple elements — html_expect_all","text":"x selenider_elements() object. ... <dynamic-dots> Function calls functions must return logical value. multiple conditions given, must TRUE test pass. See html_expect() details. testthat Whether treat expectation testthat test. need explicitly provide time, since default, can use testthat::is_testing() figure whether html_expect() called within testthat test. timeout number seconds wait condition pass. specified, timeout used x used, timeout local session element given.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test conditions on multiple elements — html_expect_all","text":"html_expect_all() returns elements x, NULL element collection elements given x. html_wait_until_all() returns boolean flag: TRUE test passes, FALSE otherwise.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test conditions on multiple elements — html_expect_all","text":"x contain elements, html_expect_all() html_wait_until_all() succeed. may want first verify least one element exists has_at_least(). html_expect_all() html_wait_until_all() can thought alternatives use (vapply(FUN.VALUE = logical(1))) (purrr::every()) within html_expect() html_wait_until(). example, following two expressions equivalent (x element collection).   However, second example give detailed error message failure.","code":"html_expect(x, \\(element) all(vapply(element, is_present, logical(1)))) html_expect_all(x, is_present)"},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_expect_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test conditions on multiple elements — html_expect_all","text":"","code":"session <- mock_selenider_session()  ss(\".class1\") |>   html_expect_all(is_present)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a subset of HTML elements — html_filter","title":"Extract a subset of HTML elements — html_filter","text":"Operators extract subset elements, single element, selenider element collection. html_filter() html_find() allow use conditions filter HTML elements (see is_present() conditions). html_find() returns first element satisfies one conditions, html_filter() returns every element satisfies conditions. [ [[ numeric subscript can used element collection filter elements position. [ returns single element specified location, [[ returns collection elements one position.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a subset of HTML elements — html_filter","text":"","code":"html_filter(x, ...)  html_find(x, ...)  # S3 method for selenider_elements [(x, i)  # S3 method for selenider_elements [[(x, i)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a subset of HTML elements — html_filter","text":"x selenider_elements object. ... <dynamic-dots> Conditions (functions function calls) used filter elements x. number ([, vector one numbers) used select elements position.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a subset of HTML elements — html_filter","text":"html_filter() [ return selenider_elements object, since can result multiple elements. html_find() [[ return single selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a subset of HTML elements — html_filter","text":"html_element() html_elements() functions, functions lazy, meaning elements fetched filtered needed. Conditions can functions function calls (see html_expect() details).","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a subset of HTML elements — html_filter","text":"","code":"session <- mock_selenider_session()  # Gives the same result as s() ss(\".class1\")[[1]] #> A selenider element selecting: #> The first element with css \".class1\"  ss(\".class1\")[1:5] #> A collection of selenider elements selecting: #> The 1st, 2nd, 3rd, 4th, and 5th elements with css selector \".class1\"  ss(\".class1\") |>   html_filter(is_visible) #> A collection of selenider elements selecting: #> The elements with css selector \".class1\" matching the following condition: , #> `(function (new, code) { old <- get_local_timeout(timeout = new) #> on.exit(reset_timeout(old)) set_timeout(timeout = new) force(code) })(0, #> is_visible(element))`  ss(\".class1\") |>   html_find(is_visible) #> A selenider element selecting: #> The first element with css \".class1\" matching a custom condition  # The above is equivalent to: elems <- ss(\".class1\") |>   html_filter(is_visible)  elems[[1]] #> A selenider element selecting: #> The first element with css \".class1\" matching a custom condition  # In R >= 4.3.0, we can instead do: # ss(\".class1\") |> #   html_filter(is_visible) |> #   _[[1]]"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple HTML elements — html_flatten","title":"Combine multiple HTML elements — html_flatten","text":"Combine set selenider_element/selenider_elements objects single selenider_elements object, allowing perform actions . c() html_flatten() thing, html_flatten() works lists selenider_element/selenider_elements objects.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple HTML elements — html_flatten","text":"","code":"html_flatten(...)  # S3 method for selenider_element c(...)  # S3 method for selenider_elements c(...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple HTML elements — html_flatten","text":"... <dynamic-dots> selenider_element selenider_elements objects combined, lists objects.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple HTML elements — html_flatten","text":"selenider_elements object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple HTML elements — html_flatten","text":"","code":"session <- mock_selenider_session()  element <- s(\".class1\")  collection <- ss(\".class2\")  html_flatten(element, collection) #> A collection of selenider elements selecting: #> A combination of elements  c(collection, element) #> A collection of selenider elements selecting: #> A combination of elements  html_flatten(list(element, collection)) #> A collection of selenider elements selecting: #> A combination of elements"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tag name of an element — html_name","title":"Get tag name of an element — html_name","text":"Get tag name (e.g. \"p\" <p> tag) selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tag name of an element — html_name","text":"","code":"html_name(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tag name of an element — html_name","text":"x selenider_element object. timeout time wait x exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tag name of an element — html_name","text":"string","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tag name of an element — html_name","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   html_name() #> NULL"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of elements in a collection — html_size","title":"Get the number of elements in a collection — html_size","text":"Get number elements HTML element collection, waiting parent elements () exist returning value. length() html_size() can used interchangeably, difference html_size() allows specify timeout.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of elements in a collection — html_size","text":"","code":"html_size(x, timeout = NULL)  # S3 method for html_elements length(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of elements in a collection — html_size","text":"x selenider_elements object. timeout time wait parent x () exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of elements in a collection — html_size","text":"integer representing number elements collection.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of elements in a collection — html_size","text":"","code":"session <- mock_selenider_session()  ss(\".class1\") |>   length() #> [1] 5"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Get element text — html_text","title":"Get element text — html_text","text":"Get inner text selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get element text — html_text","text":"","code":"html_text(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/html_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get element text — html_text","text":"x selenider_element object. timeout time wait x exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/html_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get element text — html_text","text":"string","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/html_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get element text — html_text","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   html_text() #> [1] \"Example text\""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an element enabled? — is_enabled","title":"Is an element enabled? — is_enabled","text":"is_disabled() checks element disabled attribute set TRUE, is_enabled() checks . functions throw error element exist DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an element enabled? — is_enabled","text":"","code":"is_enabled(x)  is_disabled(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an element enabled? — is_enabled","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an element enabled? — is_enabled","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an element enabled? — is_enabled","text":"functions implement retry mechanism, test condition . Use html_expect() html_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an element enabled? — is_enabled","text":"","code":"session <- mock_selenider_session()  is_enabled(s(\".class1\")) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element exist? — is_present","title":"Does an element exist? — is_present","text":"is_present() is_in_dom() checks element present page, is_missing() is_absent() checks opposite.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element exist? — is_present","text":"","code":"is_present(x)  is_in_dom(x)  is_absent(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element exist? — is_present","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element exist? — is_present","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does an element exist? — is_present","text":"functions implement retry mechanism, test condition . Use html_expect() html_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element exist? — is_present","text":"","code":"session <- mock_selenider_session()  is_present(s(\".class1\")) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an element visible? — is_visible","title":"Is an element visible? — is_visible","text":"is_visible() is_displayed() checks element can seen page, is_invisible() is_hidden() checks opposite. functions throw error element DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an element visible? — is_visible","text":"","code":"is_visible(x)  is_displayed(x)  is_hidden(x)  is_invisible(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an element visible? — is_visible","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an element visible? — is_visible","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an element visible? — is_visible","text":"functions implement retry mechanism, test condition . Use html_expect() html_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an element visible? — is_visible","text":"","code":"session <- mock_selenider_session()  is_visible(s(\".class1\")) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Special keys — keys","title":"Special keys — keys","text":"List special keys, use send_keys().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special keys — keys","text":"","code":"keys"},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Special keys — keys","text":"object class list length 29.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Special keys — keys","text":"","code":"keys$backspace #> [BACKSPACE]"},{"path":"https://ashbythorpe.github.io/selenider/reference/mock_selenider_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a mock session — mock_selenider_session","title":"Create a mock session — mock_selenider_session","text":"Create fake session, can used examples testing.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/mock_selenider_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a mock session — mock_selenider_session","text":"","code":"mock_selenider_session(   browser = c(\"chrome\", \"firefox\", \"phantomjs\", \"internet explorer\"),   timeout = 4,   driver = NULL,   local = TRUE,   quiet = TRUE,   .env = rlang::caller_env() )"},{"path":"https://ashbythorpe.github.io/selenider/reference/mock_selenider_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a mock session — mock_selenider_session","text":"browser name browser run session . timeout default time wait collecting element. driver driver object use instead creating one manually. local Whether set session local session object, using local_session(). quiet used. .env Passed local_session() function, define environment session used. Change want create session inside function use outside function.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/mock_selenider_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a mock session — mock_selenider_session","text":"selenider_session object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/mock_selenider_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a mock session — mock_selenider_session","text":"","code":"mock_selenider_session() #> A selenider session object #> • Open for 1ms #> • Browser: \"chrome\" #> • Port: 0 #> • Currently opened: Nothing #> • Timeout: 4s"},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a URL — open_url","title":"Open a URL — open_url","text":"Navigate browser specified URL, waiting page considered open finishing.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a URL — open_url","text":"","code":"open_url(url, session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a URL — open_url","text":"url URL navigate ; string. session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a URL — open_url","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a URL — open_url","text":"","code":"session <- mock_selenider_session()  open_url(\"https://www.google.com\")  # Or: open_url(session = session, \"https://www.google.com\")"},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":null,"dir":"Reference","previous_headings":"","what":"Reload the current page — reload","title":"Reload the current page — reload","text":"reload() refresh() reload current page.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reload the current page — reload","text":"","code":"reload(session = NULL)  refresh(session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reload the current page — reload","text":"session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reload the current page — reload","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reload the current page — reload","text":"","code":"session <- mock_selenider_session()  open_url(\"https://www.google.com\")  reload()"},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly select HTML elements — s","title":"Quickly select HTML elements — s","text":"s() ss() allow select elements without specifying session object. s() selects single element, shorthand html_element() without first argument ss() selects multiple elements, shorthand html_elements().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly select HTML elements — s","text":"","code":"s(   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL )  ss(   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL )"},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly select HTML elements — s","text":"css css selector. xpath XPath. id id element want select. class_name class name element want select. name name attribute element want select. link_text link text link element like select.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly select HTML elements — s","text":"s() returns selenider_element object. s() returns selenider_elements object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quickly select HTML elements — s","text":"functions allow starting point chains selectors made concise. use get_session() get global session object.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly select HTML elements — s","text":"","code":"session <- mock_selenider_session()  s(\".class1\") #> A selenider element selecting: #> The first element with css \".class1\"  # This is the equivalent of: html_element(session, \".class1\") #> A selenider element selecting: #> The first element with css \".class1\"  ss(\".class2\") #> A collection of selenider elements selecting: #> The elements with css selector \".class2\"  # This is the equivalent of: html_element(session, \".class2\") #> A selenider element selecting: #> The first element with css \".class2\"  # This provides a more concise way to begin a chain of selectors s(\".class1\") |>   html_element(\".innerclass\") |>   html_element(\"#item1\") #> A selenider element selecting: #> • The first element with css \".class1\" #> • The first child element with css \".innerclass\" #> • The first child element with css \"#item1\""},{"path":"https://ashbythorpe.github.io/selenider/reference/scroll_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Scroll to an element — scroll_to","title":"Scroll to an element — scroll_to","text":"Scrolls HTML element.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/scroll_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scroll to an element — scroll_to","text":"","code":"scroll_to(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/scroll_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scroll to an element — scroll_to","text":"x selenider_element object. js Whether scroll element using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/scroll_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scroll to an element — scroll_to","text":"x, invisibly","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/scroll_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scroll to an element — scroll_to","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   scroll_to()"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"selenider: Concise, lazy and asynchronous wrapper for 'RSelenium' — selenider-package","title":"selenider: Concise, lazy and asynchronous wrapper for 'RSelenium' — selenider-package","text":"wrapper 'RSelenium' much easier use.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"selenider: Concise, lazy and asynchronous wrapper for 'RSelenium' — selenider-package","text":"Maintainer: Ashby Thorpe ashbythorpe@gmail.com (ORCID)","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a session — selenider_session","title":"Start a session — selenider_session","text":"Begin session selenider, setting session globally unless otherwise specified.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a session — selenider_session","text":"","code":"selenider_session(   session = c(\"selenium\", \"chromote\"),   browser = NULL,   timeout = 4,   driver = NULL,   local = TRUE,   quiet = TRUE,   .env = rlang::caller_env(),   extra_args = list() )"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a session — selenider_session","text":"session package use backend. browser name browser run session ; one \"chrome\", \"firefox\", \"phantomjs\" \"internet explorer\" (Windows). NULL, function try work browser installed. timeout default time wait collecting element. driver driver object use instead creating one manually. local Whether set session local session object, using local_session(). quiet Whether let RSelenium::rsDriver() display messages. default, output suppressed, usually useful. .env Passed local_session() function, define environment session used. Change want create session inside function use outside function. extra_args list arguments pass RSelenium::remoteDriver() wdman::selenium() Selenium used, chromote::ChromoteSession$new() chromote used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a session — selenider_session","text":"selenider_session object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start a session — selenider_session","text":"selenider_session() uses RSelenium::rsDriver() create browser session. uses withr set session locally (unless otherwise specified). reset local session object, use withr::deferred_run().","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a session — selenider_session","text":"","code":"if (FALSE) { # Note that these examples will create real browser sessions, so should only be # run interactively.  session <- selenider_session(browser = \"firefox\")  withr::deferred_run() # Reset the session  # If we want to use the session manually: selenider_session(local = FALSE)  session_1 <- selenider_session(timeout = 10) # session_1 is the local session here  my_function <- function() {   session <- selenider_session(browser = \"internet explorer\")    # In here, session_2 is the local session   get_session() } # When the function finishes executing, the session is closed  my_function() # Returns `session_2`  # But outside the function, session_1 is the global session again  get_session() # Returns `session_1`   withr::deferred_run() # Close `session_1`  # If we want to use a session outside the scope of a function, # we need to use the `.env` argument. create_session <- function(timeout = 10, .env = rlang::caller_env()) {   # caller_env() is the environment where the function is called   selenider_session(browser = \"firefox\", timeout = timeout, .env = .env) }  my_session <- create_session()  # We can now use this session outside the `create_session()` function get_session()  # `my_session` will be closed automatically. }"},{"path":"https://ashbythorpe.github.io/selenider/reference/set_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the value of an input — set_value","title":"Set the value of an input — set_value","text":"set_value() sets value HTML input element string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/set_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the value of an input — set_value","text":"","code":"set_value(x, text, timeout = NULL)  send_keys(x, ..., modifiers = NULL, timeout = NULL)  clear_value(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/set_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the value of an input — set_value","text":"x selenider_element object. text string set input timeout long wait element exist. ... set inputs send x. modifiers character vector; one \"shift\", \"ctrl\", \"alt\", \"command\"/meta\".","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/set_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the value of an input — set_value","text":"x, invisibly","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/set_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the value of an input — set_value","text":"send_keys() sends set inputs element. clear_value() sets value HTML element \"\", removing existing content.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/set_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the value of an input — set_value","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   set_value(\"my text\") #> NULL"},{"path":"https://ashbythorpe.github.io/selenider/reference/submit.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit an element — submit","title":"Submit an element — submit","text":"element ancestor form, submits form. Works walking DOM, checking ancestor element element ","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/submit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit an element — submit","text":"","code":"submit(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/submit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit an element — submit","text":"x selenider_element object. js Whether submit form using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/submit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit an element — submit","text":"x, invisibly","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/submit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit an element — submit","text":"","code":"session <- mock_selenider_session()  s(\".class1\") |>   submit()"},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a screenshot of the current page — take_screenshot","title":"Take a screenshot of the current page — take_screenshot","text":"Take screenshot current session state, saving image file.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a screenshot of the current page — take_screenshot","text":"","code":"take_screenshot(file = NULL, session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a screenshot of the current page — take_screenshot","text":"file file path save screenshot . session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a screenshot of the current page — take_screenshot","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take a screenshot of the current page — take_screenshot","text":"","code":"session <- mock_selenider_session()  open_url(\"https://www.google.com\")  file_path <- tempfile(fileext = \"jpeg\")  take_screenshot(file_path)"}]
