[{"path":"https://ashbythorpe.github.io/selenider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 selenider authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"starting-the-session","dir":"Articles","previous_headings":"","what":"Starting the session","title":"Getting started with selenider","text":"use selenider, must first start session selenider_session(). don’t , done automatically , may want change options defaults (backend, example). , use chromote backend (default), set timeout 10 seconds (default 4). session, created, set local session inside current environment, meaning case, can accessed anywhere script, closed automatically script finishes running. One thing remember start session inside function, closed automatically function finishes running. want use session outside function, need use .env argument. example, let’s say want wrapper function around selenider_session() always uses RSelenium: Use open_url() navigate website. selenider also provides back() forward() functions easily navigate search history, reload() function reload current page.","code":"session <- selenider_session(   \"chromote\",   timeout = 10 ) # Bad (unless you only need to use the session inside the function) my_selenider_session <- function(...) {   selenider_session(\"RSelenium\", ...)   # The session will be closed here }  # Good - the session will be open in the caller environment/function my_selenider_session <- function(..., .env = rlang::caller_env()) {   selenider_session(\"RSelenium\", ..., .env = .env) } open_url(\"https://www.r-project.org/\")  open_url(\"https://www.tidyverse.org/\")  back()  forward()  reload()"},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"selecting-elements","dir":"Articles","previous_headings":"","what":"Selecting elements","title":"Getting started with selenider","text":"Use s() select element. default, CSS selectors used, options available. example, XPath can used instead. XPaths can useful complex selectors, limited selecting ancestors current element. However, can difficult read. Use ss() select multiple elements. Use find_element() find_elements() find child elements existing element. can chained pipe operator (|>) specify paths elements. Just like s() ss(), variety selector types available, CSS selectors used default. Use elem_children() friends find elements using relative position another. can use elem_filter() elem_find() filter collections elements using custom function. elem_find() returns first matching element, elem_filter() returns matching elements. functions use interface elem_expect(): see “Expectations” section .","code":"header <- s(\"#rStudioHeader\")  header #> A selenider element selecting: #> The first element with css selector \"#rStudioHeader\". s(xpath = \"//div/a\") #> A selenider element selecting: #> The first element with xpath \"//div/a\". all_links <- ss(\"a\")  all_links #> A collection of selenider elements selecting: #> The elements with css selector \"a\". tidyverse_title <- s(\"#rStudioHeader\") |>   find_element(\"div\") |>   find_element(\".productName\")  tidyverse_title #> A selenider element selecting: #> • The first element with css selector \"#rStudioHeader\". #> • The first child element with css selector \"div\". #> • The first child element with css selector \".productName\".  menu_items <- s(\"#rStudioHeader\") |>   find_element(\"#menu\") |>   find_elements(\".menuItem\")  menu_items #> A collection of selenider elements selecting: #> • The first element with css selector \"#rStudioHeader\". #> • The first child element with css selector \"#menu\". #> • The child elements with css selector \".menuItem\". s(\"#menuItems\") |>   elem_children() #> A collection of selenider elements selecting: #> • The first element with css selector \"#menuItems\". #> • The direct children.  s(\"#menuItems\") |>   elem_ancestors() #> A collection of selenider elements selecting: #> • The first element with css selector \"#menuItems\". #> • The ancestors. # Find the blog item in the menu menu_items |>   elem_find(has_text(\"Blog\")) #> A selenider element selecting: #> • The first element with css selector \"#rStudioHeader\". #> • The first child element with css selector \"#menu\". #> • The first child element with css selector \".menuItem\" matching the following #>   condition: #>   `has_text(\"Blog\")`  # Find the hex badges on the second row s(\".hexBadges\") |>   find_elements(\"a\") |>   elem_filter(     \\(x) substring(elem_attr(x, \"class\"), 1, 2) == \"r2\"   ) #> A collection of selenider elements selecting: #> • The first element with css selector \".hexBadges\". #> • The child elements with css selector \"a\" matching the following condition: #>   `function(x) substring(elem_attr(x, \"class\"), 1, 2) == \"r2\"`"},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"interacting-with-an-element","dir":"Articles","previous_headings":"","what":"Interacting with an element","title":"Getting started with selenider","text":"selenider elements lazy, meaning specify path element group elements, actually located DOM something . three types functions force element collected: actions (e.g. elem_click()) properties (e.g. elem_text()) conditions (e.g. is_visible()) functions act elements use elem_ prefix.","code":""},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"actions","dir":"Articles","previous_headings":"","what":"Actions","title":"Getting started with selenider","text":"various ways interact HTML element. Use elem_click(), elem_right_click(), elem_double_click() click element, elem_hover() hover element. Use elem_scroll_to() scroll element clicking , useful element currently view. links work clicked , since open content new tab. Use open_url() manually solve . approach recommended using elem_click(), reliable. Use elem_set_value() set value input element, elem_clear_value() clear value. selenider also provides elem_submit() function, allowing submit HTML form using element inside form.","code":"s(\".blurb\") |>   find_element(\"a\") |> # List of packages   elem_scroll_to() |>   elem_click() s(\".packages\") |>   find_elements(\"a\") |>   elem_find(has_text(\"dplyr\")) |> # Find the link to the dplyr documentation   elem_attr(\"href\") |> # Get the URL   open_url() s(\"input[type='search']\") |>   elem_set_value(\"filter\")  # Go back to the main page back() back()"},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"properties","dir":"Articles","previous_headings":"","what":"Properties","title":"Getting started with selenider","text":"HTML elements number accessible properties.","code":"# Get the tag name s(\"#appTidyverseSite\") |>   elem_name() #> [1] \"div\"  # Get the text inside the element s(\".tagline\") |>   elem_text() #> [1] \"\\n          R packages for data science\\n          \"  # Get an attribute s(\".hexBadges\") |>   find_element(\"img\") |>   elem_attr(\"alt\") #> [1] \"dplyr hex sticker\"  # Get every attribute s(\".hexBadges\") |>   find_element(\"img\") |>   elem_attrs() #> $src #> [1] \"https://d33wubrfki0l68.cloudfront.net/621a9c8c5d7b47c4b6d72e8f01f28d14310e8370/193fc/css/images/hex/dplyr.png\" #>  #> $alt #> [1] \"dplyr hex sticker\" #>  #> $class #> [1] \"r1 c0\"  # Get the 'value' attribute (NA in this case) s(\"#homeContent\") |>   elem_value() #> [1] NA  # Get a CSS property s(\".tagline\") |>   elem_css_property(\"font-size\") #> [1] \"36px\""},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"conditions","dir":"Articles","previous_headings":"","what":"Conditions","title":"Getting started with selenider","text":"Conditions predicate functions HTML elements. Unlike functions selenider, wait element exist condition met: return TRUE FALSE (throw error) instantly. reason, designed used elem_expect() elem_wait_until(), automatically wait conditions met. wide range conditions, many thing. HTML property corresponding condition, selenider also provides conditions basic checks like is_present(), is_visible() is_enabled(). documentation condition, can find conditions “See Also” section.","code":"s(\".hexBadges\") |>   is_present() #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/selenider/articles/selenider.html","id":"expectations","dir":"Articles","previous_headings":"","what":"Expectations","title":"Getting started with selenider","text":"selenider provides concise testing interface using elem_expect() function. Provide element, one conditions, function wait conditions met. Conditions can functions simple calls (e.g. has_text(\"text\") turned has_text(<ELEMENT>, \"text\")). elem_expect() tends work well R’s lambda function syntax. Errors try give much information possible. Since know condition going fail, ’ll set timeout lower value don’t wait long. (&&), (||) (!) can used conditions logical values. Additionally, can omit first argument elem_expect() (case, conditions must calls). Use elem_wait_until() don’t want error thrown condition met. elem_wait_until() exact thing elem_expect() always returns TRUE FALSE. syntax used elem_expect() elem_wait_until() can also used elem_filter() elem_find() filter element collections. Additionally, selenider provides elem_expect_all() elem_wait_until_all() test condition every element collection. done, need close session; closed us automatically!","code":"s(\".tagline\") |>   elem_expect(is_present) |>   elem_expect(has_text(\"data science\"))  s(\".hexBadges\") |>   find_element(\"a\") |>   elem_expect(is_visible, is_enabled)  s(\"#menu\") |>   find_element(\"#menuItems\") |>   elem_children() |>   elem_expect(has_at_least(4))  s(\".productName\") |>   elem_expect(     \\(x) substring(elem_text(x), 1, 1) == \"T\" # Tidyverse starts with T   ) s(\".band.first\") |>   find_element(\".blurb\") |>   find_element(\"code\") |>   elem_expect(has_text('install.packages(\"selenider\")'), timeout = 1) #> Error in `elem_expect()`: #> ! Condition failed after waiting for 1 seconds: #> `has_text(\"install.packages(\\\"selenider\\\")\")` #> ℹ `x` does not have text \"install.packages(\\\"selenider\\\")\". #> ℹ Actual text: \"install.packages(\\\"tidyverse\\\")\". s(\".random-class\") |>   elem_expect(!is_present)  s(\".innards\") |>   elem_expect(is_visible || is_enabled)  elem_1 <- s(\".random-class\")  elem_2 <- s(\"#main\")  # Test that either the first or second element exists elem_expect(is_present(elem_1) || is_present(elem_2)) elem_wait_until(is_present(elem_1) || is_present(elem_2)) #> [1] TRUE s(\".hexBadges\") |>   find_elements(\"a\") |>   elem_expect_all(is_visible)"},{"path":"https://ashbythorpe.github.io/selenider/articles/unit-testing.html","id":"using-selenider-with-testthat","dir":"Articles","previous_headings":"","what":"Using selenider with testthat","title":"Unit testing","text":"Tests contained within testthat::test_that() self-contained, impact tests. selenider exception: selenider sessions, created inside testthat::test_that() block, closed automatically test finishes running. Remember, always, use .env argument wrapping selenider_session() another function. elem_expect() also additional features inside testhat::test_that(). succeeds, call testthat::succeed(), fails, use testthat::fail() instead throwing error. allows tests continue running even elem_expect() fails.","code":"test_that(\"My test\", {   # session will be opened here...   open_url(\"https://www.r-project.org/\")    s(\".random-class\") |>     elem_expect(is_present) }) # and closed here! #> -- Failure ('<text>:5:3'): My test --------------------------------------------- #> Condition failed after waiting for 4 seconds: #> `is_present` #> i `x` is not present. #>  #> Where `x` is: #> A selenider element selecting: #> The first element with css selector \".random-class\". #> Error in `reporter$stop_if_needed()`: #> ! Test failed"},{"path":"https://ashbythorpe.github.io/selenider/articles/unit-testing.html","id":"using-selenider-with-shinytest2","dir":"Articles","previous_headings":"","what":"Using selenider with shinytest2","title":"Unit testing","text":"Since shinytest2 uses chromote backend, can used selenider. selenider can used add robust UI testing shinytest2, replacing unreliable uses AppDriver$expect_screenshot(). shinytest2 UI expectations (AppDriver$expect_text(), AppDriver$expect_html() AppDriver$expect_js()), include laziness implicit waiting selenider provides, making bit less reliable. Let’s create simple shiny app, consisting shiny::actionButton() shiny:: conditionalPanel(). panel shown button clicked odd number times, hidden otherwise. like test server-side processing button input done correctly, can using shinytest2. However, also like check panel visible correct times, shinytest2, use selenider instead. start selenider session using existing shinytest2::AppDriver object, supply driver argument selenider_session(): session <- selenider_session(driver = <AppDriver>) Note difference styles: selenider must specify tests explicitly, shinytest2 uses snapshot-based approach (specifying value want test omitting value expect ). advantages disadvantages approach: tests generally easier create update, little harder debug. want use snapshot-based style, can manually, e.g.: However, note tests longer wait certain period time value correct, since test unaware correct value .","code":"library(shiny) library(shinytest2) shiny_app <- shinyApp(   ui = fluidPage(     actionButton(\"button\", label = \"Click me!\"),     conditionalPanel(       condition = \"(input.button % 2) == 1\",       p(\"Button has been clicked an odd number of times.\")     ) |>       tagAppendAttributes(id = \"condpanel\")   ),   server = function(input, output) {     even <- reactive((input$button %% 2) == 0)     exportTestValues(even = { even() })   } ) test_that(\"App works\", {   app <- AppDriver$new(shiny_app)    session <- selenider_session(driver = app)    s(\"#condpanel\") |>     elem_expect(is_invisible)    app$click(\"button\")    app$expect_values(export = \"even\")   s(\"#condpanel\") |>     elem_expect(is_visible)    app$click(\"button\")    app$expect_values(export = \"even\")   s(\"#condpanel\") |>     elem_expect(is_invisible) }) #> Can't compare snapshot to reference when testing interactively. #> i Run `devtools::test()` or `testthat::test_file()` to see changes. #> New path: /tmp/RtmpIejoxg/st2-1dc94b585115/001_.png #> Can't compare snapshot to reference when testing interactively. #> i Run `devtools::test()` or `testthat::test_file()` to see changes. #> New path: /tmp/RtmpIejoxg/st2-1dc94b585115/001.json #> Can't compare snapshot to reference when testing interactively. #> i Run `devtools::test()` or `testthat::test_file()` to see changes. #> New path: /tmp/RtmpIejoxg/st2-1dc94b585115/002_.png #> Can't compare snapshot to reference when testing interactively. #> i Run `devtools::test()` or `testthat::test_file()` to see changes. #> New path: /tmp/RtmpIejoxg/st2-1dc94b585115/002.json #> Test passed expect_snapshot(is_visible(s(\"#condpanel\")))"},{"path":"https://ashbythorpe.github.io/selenider/articles/unit-testing.html","id":"using-selenider-with-github-actions","dir":"Articles","previous_headings":"","what":"Using selenider with Github Actions","title":"Unit testing","text":"complexity using selenider Github Actions depends backend use. like use chromote backend, shouldn’t need make special additions workflow files, can safely use something like r-lib’s R CMD CHECK action. chromote requires chrome installed, already case Github’s machines. Using RSelenium backend complicated. Installing RSelenium can complicated, reliable workflow, recommend using docker. Unfortunately, RSelenium currently supports rather old docker images. currently use RSelenium version 3.141.0. Note following advice also applies want use Selenium docker manually. use docker Github Action yaml file, add following lines (changing ports browser wanted/needed): download Firefox start Selenium server port 4444. Automating browser Selenium consists two parts: server client. default, selenider_session() tries setup , can stop happening using create_selenium_client() function, passing result driver argument selenider_session(). session can used usual. selenider longer able close selenium server, done automatically Github Action. information, see setup Github Actions workflow selenium: https://github.com/ashbythorpe/selenider/blob/main/.github/workflows/R-CMD-check-selenium.yaml https://github.com/ashbythorpe/selenider/blob/main/tests/testthat/helper-session.R","code":"services:   selenium:     image: selenium/standalone-firefox:3.141.0     ports:       - 4444:4444 session <- selenider_session(   \"selenium\",   browser = \"firefox\"   driver = create_selenium_client(     port = 4444   ) )"},{"path":"https://ashbythorpe.github.io/selenider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer, copyright holder.","code":""},{"path":"https://ashbythorpe.github.io/selenider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2023). selenider: Concise, Lazy Reliable Wrapper 'chromote' 'RSelenium'. https://github.com/ashbythorpe/selenider, https://ashbythorpe.github.io/selenider/.","code":"@Manual{,   title = {selenider: Concise, Lazy and Reliable Wrapper for 'chromote' and 'RSelenium'},   author = {Ashby Thorpe},   year = {2023},   note = {https://github.com/ashbythorpe/selenider, https://ashbythorpe.github.io/selenider/}, }"},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"selenider","dir":"","previous_headings":"","what":"Concise, Lazy and Reliable Wrapper for chromote and RSelenium","title":"Concise, Lazy and Reliable Wrapper for chromote and RSelenium","text":"Traditionally, automating web browser often unreliable, especially using R. Programmers forced write verbose code, utilising inconsistent workarounds (using Sys.sleep() wait something happen). selenider aims make web testing scraping R much simpler, providing wrapper either chromote RSelenium. inspired Java’s Selenide Python’s Selene. Code reliability reproducibility essential writing R code. selenider provides features make scripts work every time run, without extra code: Lazy elements: selenider try find element page absolutely necessary. definitions HTML elements separated existence page, allowing two converge absolutely necessary. selenider, HTML elements stored directions element page, rather element . much reliable alternative since webpage can constantly change, resulting elements becoming invalid creation use (e.g. dreaded StaleElementReferenceException Selenium). Automatic waiting: selenider automatically wait code work (e.g. waiting input exist clickable actually clicking ), allowing write scripts website always responds instantly interactions. selenider’s main focus API. design choices result concise yet expressive code easy read easy write: global session object results shorter, declarative code. also allows session created beginning script test, closed end. functions designed use pipe operator (|> %>%); elements can selected, tested operated single pipeline. elem_expect() powerful way specify test expectations, simple extensible syntax informative error messages. selenider compatible automated testing frameworks like testthat shinytest2.","code":""},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Concise, Lazy and Reliable Wrapper for chromote and RSelenium","text":"Additionally, must install chromote RSelenium. recommend chromote, quicker easier get running. using RSelenium, must also Java installed. Finally, must web browser installed. chromote, Google Chrome required. RSelenium, browser can used, Firefox recommended.","code":"# Install selenider from CRAN install.packages(\"selenider\")  # Or the development version from Github # install.packages(\"remotes\") remotes::install_github(\"ashbythorpe/selenider\") # Either: install.packages(\"chromote\")  # Or: install.packages(\"RSelenium\")"},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Concise, Lazy and Reliable Wrapper for chromote and RSelenium","text":"following code navigates R project website, finds link CRAN mirror list, checks link correct, clicks link element. Now ’re mirror list page, let’s find link every CRAN mirror UK.","code":"library(selenider) open_url(\"https://www.r-project.org/\")  s(\".row\") |>   find_element(\"div\") |>   find_elements(\"a\") |>   elem_find(has_text(\"CRAN\")) |>   elem_expect(attr_contains(\"href\", \"cran.r-project.org\")) |>   elem_click() s(\"dl\") |>   find_elements(\"dt\") |>   elem_find(has_text(\"UK\")) |>   find_element(xpath = \"./following-sibling::dd\") |>   find_elements(\"tr\") |>   elem_expect(has_at_least(1)) |>   as.list() |>   lapply(     \\(x) x |>       find_element(\"a\") |>       elem_attr(\"href\")   )"},{"path":"https://ashbythorpe.github.io/selenider/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Concise, Lazy and Reliable Wrapper for chromote and RSelenium","text":"Get started selenider, learn basics: vignette(\"selenider\"). Use selenider testthat, shinytest2 Github Actions: vignette(\"unit-testing\", package = \"selenider\"). Use selenider rvest: vignette(\"-rvest\", package = \"selenider\")","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as.list.selenider_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterate over an element collection — as.list.selenider_elements","title":"Iterate over an element collection — as.list.selenider_elements","text":".list() transforms selenider_elements object list selenider_element objects. result can used loops higher order functions like lapply()/purrr::map() (whereas selenider_element object ). function stable. element_list() underlying function called element_list(). Use elem_flatmap() want select sub-elements element collection. elem_flatmap() allows apply function element selenider_elements object, provided function returns selenider_element/selenider_elements object . result flattened single selenider_elements object. benefit traditional iteration techniques laziness elements maintained, nothing fetched DOM. function experimental, work .f uses elem_flatten() (nested elem_flatmap()). elem_flatmap() works executing .f mock element, recording results x. means matter length x, .f evaluated , elem_flatmap() call. reason, .f invoke side effects anything selecting sub-elements. elem_flatmap() can essentially viewed map operation (e.g. lapply(), purrr::map()) followed flattening operation (elem_flatmap()). means :   essentially equivalent :   However, second approach done lazily. .list()/element_list() essentially turns x : list(x[[1]], x[[2]], ...) However, , length x must computed. means element inside list still lazy, list considered lazy, since number elements DOM may change. avoid problems, recommended use element list just created, make sure list accurate representation DOM used.","code":"x |>   elem_flatmap(.f) x |>   as.list() |>   lapply(.f) |>   elem_flatten()"},{"path":"https://ashbythorpe.github.io/selenider/reference/as.list.selenider_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterate over an element collection — as.list.selenider_elements","text":"","code":"# S3 method for selenider_elements as.list(x, timeout = NULL, ...)  element_list(x, timeout = NULL)  elem_flatmap(x, .f, ...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/as.list.selenider_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterate over an element collection — as.list.selenider_elements","text":"x selenider_elements object. timeout long wait x exist computing length. ... Passed .f. .f function apply element x.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as.list.selenider_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterate over an element collection — as.list.selenider_elements","text":"elem_flatmap() returns selenider_element object. .list()/element_list() returns list selenider_element objects.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/as.list.selenider_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterate over an element collection — as.list.selenider_elements","text":"","code":"html <- \" <div id='div1'>   <p>Text 1<\/p> <\/div> <div id='div2'>   <p>Text 2<\/p> <\/div> <div id='div3'>   <p>Text 3<\/p> <\/div> <div id='div4'>   <p>Text 4<\/p> <\/div> \"  session <- minimal_selenider_session(html)  divs <- ss(\"div\")  # Get the <p> tag inside each div. divs |>   elem_flatmap(\\(x) x |> find_element(\"p\"))  # Or: p_tags <- divs |>   elem_flatmap(find_element, \"p\")  # To get the text in each tag, we can't use elem_flatmap() for (elem in as.list(p_tags)) {   print(elem_text(elem)) }  # Or: lapply(as.list(p_tags), elem_text)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a difftime — as_pretty_dt","title":"Format a difftime — as_pretty_dt","text":"Internal method used print selenider_session() object. Designed used prettyunits::pretty_dt(), prettyunits::pretty_ms() prettyunits::pretty_sec().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a difftime — as_pretty_dt","text":"","code":"as_pretty_dt(x)  # S3 method for pretty_dt cli_format(x, style = NULL, ...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a difftime — as_pretty_dt","text":"x string representing difftime. style, ... used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a difftime — as_pretty_dt","text":"object class pretty_dt.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/as_pretty_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a difftime — as_pretty_dt","text":"","code":"x <- as_pretty_dt(prettyunits::pretty_sec(10))  cli::cli_text(\"{.val x}\")"},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":null,"dir":"Reference","previous_headings":"","what":"Move back or forward in browsing history — back","title":"Move back or forward in browsing history — back","text":"back() navigates previously opened URL, previously opened page browsing history. forward() reverses action back(), going next page browsing history.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move back or forward in browsing history — back","text":"","code":"back(session = NULL)  forward(session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move back or forward in browsing history — back","text":"session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move back or forward in browsing history — back","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/back.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move back or forward in browsing history — back","text":"","code":"session <- selenider_session()  open_url(\"https://r-project.org\")  open_url(\"https://www.tidyverse.org/\")  back()  forward()  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a session object — close_session","title":"Close a session object — close_session","text":"Shut session object, closing browser stopping server. done automatically session set local session (happens default).","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a session object — close_session","text":"","code":"close_session(x = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a session object — close_session","text":"x selenider_session object. omitted, local session object closed.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close a session object — close_session","text":"Nothing.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/close_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close a session object — close_session","text":"","code":"session <- selenider_session(local = FALSE)  close_session(session)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup(FALSE) # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the DOM family of an element — elem_ancestors","title":"Get the DOM family of an element — elem_ancestors","text":"Find elements certain relative position HTML element. elem_ancestors() selects every element contains current element (children, grand-children, etc.). elem_parent() selects element contains current element. elem_siblings() selects every element parent current element. elem_children() selects every element connected directly current element. elem_descendants() selects every element contained current element. current element direct parent, must type ancestor.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the DOM family of an element — elem_ancestors","text":"","code":"elem_ancestors(x)  elem_parent(x)  elem_siblings(x)  elem_children(x)  elem_descendants(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the DOM family of an element — elem_ancestors","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the DOM family of an element — elem_ancestors","text":"functions return selenider_elements object, except elem_parent(), returns selenider_element object (since element can one parent).","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_ancestors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the DOM family of an element — elem_ancestors","text":"functions except elem_children() elem_descendants() use XPath selectors, may slow, especially using chromote backend.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_ancestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the DOM family of an element — elem_ancestors","text":"","code":"html <- \" <html> <body>   <div>     <div id='current'>       <p><\/p>       <div>         <p><\/p>         <br>       <\/div>     <\/div>     <div><\/div>     <p><\/p>   <\/div> <\/body> <\/html> \"  session <- minimal_selenider_session(html)  current <- s(\"#current\")  # Get all the names of an element collection elem_names <- function(x) {   x |>     as.list() |>     vapply(elem_name, FUN.VALUE = character(1)) }  current |>   elem_ancestors() |>   elem_expect(has_length(3)) |>   elem_names() # html, div, body  current |>   elem_parent() |>   elem_name() # div  current |>   elem_siblings() |>   elem_expect(has_length(2)) |>   elem_names() # div, p  current |>   elem_children() |>   elem_expect(has_length(2)) |>   elem_names() # p, div  current |>   elem_descendants() |>   elem_expect(has_length(4)) |>   elem_names() # p, div, p, br  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attributes of an element — elem_attr","title":"Get attributes of an element — elem_attr","text":"Get attribute selenider_element object. elem_attr() returns single attribute value string. elem_attrs() returns named list containing every attribute. elem_value() returns 'value' attribute.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attributes of an element — elem_attr","text":"","code":"elem_attr(x, name, default = NA_character_, timeout = NULL)  elem_attrs(x, timeout = NULL)  elem_value(x, ptype = character(), timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attributes of an element — elem_attr","text":"x selenider_element object. name name attribute get; string. default default value use attribute exist element. timeout time wait x exist. ptype type cast value . Useful value integer decimal number. default, value returned string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attributes of an element — elem_attr","text":"elem_attr() returns character vector length 1. elem_attrs() returns named list strings. return value elem_value() type ptype length 1.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get attributes of an element — elem_attr","text":"","code":"html <- \" <a class='link' href='https://r-project.org'>R<\/a> <input type='number' value='0'> \"  session <- minimal_selenider_session(html)  s(\"a\") |>   elem_attr(\"href\")  s(\"a\") |>   elem_attrs()  s(\"input[type='number']\") |>   elem_value(ptype = integer())  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Force an element to be collected and stored — elem_cache","title":"Force an element to be collected and stored — elem_cache","text":"selenider_element/selenider_elements objects generally lazy, meaning collect actual element DOM absolutely necessary, forget immediately . avoid situations DOM changes element collected, resulting errors unreliable behaviour. elem_cache() forces element collection elements collected stored, making eager rather lazy. useful operating element multiple times, since collecting element improve performance. However, must sure element change page using .","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force an element to be collected and stored — elem_cache","text":"","code":"elem_cache(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force an element to be collected and stored — elem_cache","text":"x selenider_element/selenider_elements object. timeout long wait element(s) exist collecting .","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force an element to be collected and stored — elem_cache","text":"modified version x. result elem_cache() can used normal selenider_element/selenider_elements object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Force an element to be collected and stored — elem_cache","text":"functions make selenider elements permanently eager. sub-elements cached unless specified. example, consider following code:   example, parent element class \".class1\" cached, child element class \".class2\" .","code":"s(\".class1\") |>   elem_parent() |>   elem_cache() |>   find_element(\".class2\")"},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force an element to be collected and stored — elem_cache","text":"","code":"html <- \" <div> <p id='specifictext'><\/p> <button><\/button> <\/div> \"  session <- minimal_selenider_session(html)  # Selecting this button may be slow, since we are using relative XPath selectors. button <- s(\"#specifictext\") |>   elem_siblings() |>   elem_find(has_name(\"button\"))  # But we need to click the button 10 times! # Normally, this would involve fetching the button from the DOM 10 times click_button_10_times <- function(x) {   lapply(1:10, \\(unnused) elem_click(x))   invisible(NULL) }  # But with elem_cache(), the button will only be fetched once cached_button <- elem_cache(button)  click_button_10_times(cached_button)  # But the cached button is less reliable if the DOM is changing execute_js_fn(\"x => { x.outerHTML = '<button><\/button>'; }\", button)  try(elem_click(cached_button, timeout = 0.1))  # But the non-cached version works elem_click(button)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_click.html","id":null,"dir":"Reference","previous_headings":"","what":"Click an element — elem_click","title":"Click an element — elem_click","text":"Clicks HTML element, either simulating mouse click triggering element's \"click\" event. elem_click() left clicks element, elem_double_click() left clicks element two times short period time, elem_right_click() right clicks element, opening context menu.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_click.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Click an element — elem_click","text":"","code":"elem_click(x, js = FALSE, timeout = NULL)  elem_double_click(x, js = FALSE, timeout = NULL)  elem_right_click(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_click.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Click an element — elem_click","text":"x selenider_element object. js Whether click element using JavaScript. elem_right_click(), ignored Selenium used, since right clicking using RSelenium seem work (JavaScript used instead). timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_click.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Click an element — elem_click","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_click.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Click an element — elem_click","text":"","code":"html <- \" <button onclick = hidetext() oncontextmenu = showtext()><\/button> <p id = 'texttohide'>Hello!<\/p> \"  js <- \" function hidetext() {   document.getElementById('texttohide').style.display = 'none' }  function showtext() {   document.getElementById('texttohide').style.display = 'block' } \"  session <- minimal_selenider_session(html, js = js)  elem_expect(s(\"p\"), is_visible)  s(\"button\") |>   elem_click()  elem_expect(s(\"p\"), is_invisible)  s(\"button\") |>   elem_right_click()  elem_expect(s(\"p\"), is_visible)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_css_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a CSS property of an element — elem_css_property","title":"Get a CSS property of an element — elem_css_property","text":"Get CSS property element (e.g. \"background-color\"). Specifically, computed style returned, meaning , example, widths heights returned pixels, colours returned RGB value.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_css_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a CSS property of an element — elem_css_property","text":"","code":"elem_css_property(x, name, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_css_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a CSS property of an element — elem_css_property","text":"x selenider_element object. name name CSS property get. timeout time wait x exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_css_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a CSS property of an element — elem_css_property","text":"string, NA property exist.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_css_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a CSS property of an element — elem_css_property","text":"","code":"html <- \" <p style='visibility:hidden; color:red;'>Text<\/p> \"  session <- minimal_selenider_session(html)  s(\"p\") |>   elem_css_property(\"visibility\")  s(\"p\") |>   elem_css_property(\"color\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Are two elements equivalent? — elem_equal","title":"Are two elements equivalent? — elem_equal","text":"Checks two selenider_element objects point element page. elem_equal() equivalent using ==, allows specify timeout value needed.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are two elements equivalent? — elem_equal","text":"","code":"elem_equal(x, y, timeout = NULL)  # S3 method for selenider_element ==(e1, e2)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are two elements equivalent? — elem_equal","text":"x, y, e1, e2 selenider_element objects compare. timeout long wait elements present.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are two elements equivalent? — elem_equal","text":"TRUE FALSE.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are two elements equivalent? — elem_equal","text":"","code":"html <- \" <div><\/div> <div class='second'>   <p><\/p> <\/div> \"  session <- minimal_selenider_session(html)  s(\"div\") == ss(\"div\")[[1]]  has_p_child <- function(x) {   x |>     elem_children() |> # Direct children     elem_filter(has_name(\"p\")) |>     has_at_least(1) }  ss(\"div\") |>   elem_find(has_p_child) |>   elem_equal(s(\".second\")) # TRUE  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":null,"dir":"Reference","previous_headings":"","what":"Test one or more conditions on HTML elements — elem_expect","title":"Test one or more conditions on HTML elements — elem_expect","text":"elem_expect() waits set conditions return TRUE. , certain period time (default 4 seconds), happen, informative error thrown. Otherwise, original element returned. elem_wait_until() , returns logical value (whether test passed), allowing handle failure case explicitly.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test one or more conditions on HTML elements — elem_expect","text":"","code":"elem_expect(x, ..., testthat = NULL, timeout = NULL)  elem_wait_until(x, ..., timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test one or more conditions on HTML elements — elem_expect","text":"x selenider_element/selenider_elements object, condition. ... <dynamic-dots> Function calls functions must return logical value. multiple conditions given, must TRUE test pass. testthat Whether treat expectation testthat test. need explicitly provide time, since default, can use testthat::is_testing() figure whether elem_expect() called within testthat test. timeout number seconds wait condition pass. specified, timeout used x used, timeout local session element given.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test one or more conditions on HTML elements — elem_expect","text":"elem_expect() invisibly returns element(s) x, NULL element collection elements given x. elem_wait_for() returns boolean flag: TRUE test passes, FALSE otherwise.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":"conditions","dir":"Reference","previous_headings":"","what":"Conditions","title":"Test one or more conditions on HTML elements — elem_expect","text":"Conditions can supplied functions calls. Functions allow use unary conditions without formatting call (e.g. is_present rather is_present()). also allows make use R's anonymous function syntax quickly create custom conditions. x supplied first argument function. Function calls allow use conditions take multiple arguments (e.g. has_text()) without use intermediate function. call modified x first argument function call. example, has_text(\"\") modified become: has_text(x, \"\"). (&&), (||) (!) functions can used types conditions. one condition given ..., combined using &&.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":"custom-conditions","dir":"Reference","previous_headings":"","what":"Custom conditions","title":"Test one or more conditions on HTML elements — elem_expect","text":"function takes selenider element element collection first argument, returns logical value, can used condition. Additionally, functions provide features make creating custom conditions easy: Errors class expect_error_continue handled, function prevented terminating early. means element found, function retry instead immediately throwing error. selenider functions used inside conditions timeout, default, set 0, ignoring local timeout. important, since elem_expect() elem_wait_until() implement retry mechanic manually. override default, manually specify timeout. two features allow use functions like elem_text() access properties element, without needing worry errors throw timeouts use. See Examples examples custom condition. custom conditions can also used elem_filter() elem_find().","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test one or more conditions on HTML elements — elem_expect","text":"","code":"html <- \" <div class='class1'> <button id='disabled-button' disabled>Disabled<\/button> <p style='visibility:hidden;'>Example text<\/p> <button id='enabled-button'>Enabled<\/button> <\/div>  <div class='class3'> <\/div> \" session <- minimal_selenider_session(html)  s(\".class1\") |>   elem_expect(is_present)  s(\"#enabled-button\") |>   elem_expect(is_visible, is_enabled)  s(\"#disabled-button\") |>   elem_expect(is_disabled)  # Error: element is visible but not enabled s(\"#disabled-button\") |>   elem_expect(is_visible, is_enabled, timeout = 0.5) |>   try() # Since this condition will fail  s(\".class2\") |>   elem_expect(!is_present, !is_in_dom, is_absent) # All 3 are equivalent  # All other conditions will error if the element does not exist s(\".class2\") |>   elem_expect(is_invisible, timeout = 0.1) |>   try()  # elem_expect() returns the element, so can be used in chains s(\"#enabled-button\") |>   elem_expect(is_visible && is_enabled) |>   elem_click() # Note that elem_click() will do this automatically  s(\"p\") |>   elem_expect(is_hidden, has_exact_text(\"Example text\"))  # Or use an anonymous function s(\"p\") |>   elem_expect(\\(elem) identical(elem_text(elem), \"Example text\"))  # If your conditions are not specific to an element, you can omit the `x` argument elem_1 <- s(\".class1\") elem_2 <- s(\".class2\")  elem_expect(is_present(elem_1) || is_present(elem_2))  # We can now use the conditions on their own to figure out which element exists if (is_present(elem_1)) {   print(\"Element 1 is visible\") } else {   print(\"Element 2 is visible\") }  # Use elem_wait_until() to handle failures manually elem <- s(\".class2\") if (elem_wait_until(elem, is_present)) {   elem_click(elem) } else {   reload() }  # Creating a custom condition is easiest with an anonymous function s(\"p\") |>   elem_expect(     \\(elem) elem |>       elem_text() |>       grepl(pattern = \"Example .*\")   )  # Or create a function, to reuse the condition multiple times text_contains <- function(x, pattern) {   text <- elem_text(x)      grepl(pattern, text) }  s(\"p\") |>   elem_expect(text_contains(\"Example *\"))  # If we want to continue on error, we need to use the \"expect_error_continue\" class # This involves making a custom error object error_condition <- function() {   my_condition <- list(message = \"Custom error!\")   class(my_condition) <- c(\"expect_error_continue\", \"error\", \"condition\")   stop(my_condition) }  # This is much easier with rlang::abort() / cli::cli_abort(): error_condition_2 <- function() {   rlang::abort(\"Custom error!\", class = \"expect_error_continue\") }  # This error will not be caught try(elem_expect(stop(\"Uncaught error!\")))  # These will eventually throw an error, but will wait 0.5 seconds to do so. try(elem_expect(error_condition(), timeout = 0.5)) try(elem_expect(error_condition_2(), timeout = 0.5))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test conditions on multiple elements — elem_expect_all","title":"Test conditions on multiple elements — elem_expect_all","text":"elem_expect_all() elem_wait_until_all() complements elem_expect() elem_wait_until() test conditions multiple elements element collection.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test conditions on multiple elements — elem_expect_all","text":"","code":"elem_expect_all(x, ..., testthat = NULL, timeout = NULL)  elem_wait_until_all(x, ..., timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test conditions on multiple elements — elem_expect_all","text":"x selenider_elements() object. ... <dynamic-dots> Function calls functions must return logical value. multiple conditions given, must TRUE test pass. See elem_expect() details. testthat Whether treat expectation testthat test. need explicitly provide time, since default, can use testthat::is_testing() figure whether elem_expect() called within testthat test. timeout number seconds wait condition pass. specified, timeout used x used, timeout local session element given.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test conditions on multiple elements — elem_expect_all","text":"elem_expect_all() returns x, invisibly. elem_wait_until_all() returns boolean flag: TRUE test passes, FALSE otherwise.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test conditions on multiple elements — elem_expect_all","text":"x contain elements, elem_expect_all() elem_wait_until_all() succeed. may want first verify least one element exists has_at_least(). elem_expect_all() elem_wait_until_all() can thought alternatives use (vapply(FUN.VALUE = logical(1))) (purrr::every()) within elem_expect() elem_wait_until(). example, following two expressions equivalent (x element collection).   However, second example give detailed error message failure.","code":"elem_expect(x, \\(element) all(vapply(as.list(element), is_present, logical(1)))) elem_expect_all(x, is_present)"},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_expect_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test conditions on multiple elements — elem_expect_all","text":"","code":"html <- \" <div id='div1'>Content 1<\/div> <div id='div2'>Content 2<\/div> <div id='div3' style='display:none;'>Content 3<\/div> <div id='div4'>Content 4<\/div> \"  session <- minimal_selenider_session(html)  ss(\"div\") |>   elem_expect_all(is_visible, timeout = 0.1) |>   try()  ss(\"div\")[-3] |>   elem_expect_all(is_visible)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a subset of HTML elements — elem_filter","title":"Extract a subset of HTML elements — elem_filter","text":"Operators extract subset elements, single element, selenider element collection. elem_filter() elem_find() allow use conditions filter HTML elements (see is_present() conditions). elem_find() returns first element satisfies one conditions, elem_filter() returns every element satisfies conditions. [ [[ numeric subscript can used element collection filter elements position. [ returns single element specified location, [[ returns collection elements one position.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a subset of HTML elements — elem_filter","text":"","code":"elem_filter(x, ...)  elem_find(x, ...)  # S3 method for selenider_elements [(x, i)  # S3 method for selenider_elements [[(x, i)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a subset of HTML elements — elem_filter","text":"x selenider_elements object. ... <dynamic-dots> Conditions (functions function calls) used filter elements x. number ([, vector one numbers) used select elements position.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a subset of HTML elements — elem_filter","text":"elem_filter() [ return selenider_elements object, since can result multiple elements. elem_find() [[ return single selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a subset of HTML elements — elem_filter","text":"find_element() find_elements() functions, functions lazy, meaning elements fetched filtered needed. Conditions can functions function calls (see elem_expect() details).","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a subset of HTML elements — elem_filter","text":"","code":"html <- \" <button disabled>Button 1<\/button> <button>Button 2<\/button> <p>Text<\/p> <div style='display:none;'><\/div> \" session <- minimal_selenider_session(html)  elements <- ss(\"./*\")  # Gives the same result as s() elements[[1]]  elements[1:3]  elements[-2]  elements |>   elem_filter(is_visible)  elements |>   elem_find(is_visible)  # The above is equivalent to: visible_elems <- elements |>   elem_filter(is_visible) visible_elems[[1]]  # In R >= 4.3.0, we can instead do: # ss(\".class1\") |> #   elem_filter(is_visible) |> #   _[[1]]  ss(\"button\") |>   elem_filter(is_enabled)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple HTML elements — elem_flatten","title":"Combine multiple HTML elements — elem_flatten","text":"Combine set selenider_element/selenider_elements objects single selenider_elements object, allowing perform actions . c() elem_flatten() thing, elem_flatten() works given list selenider_element/selenider_elements objects.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple HTML elements — elem_flatten","text":"","code":"elem_flatten(...)  # S3 method for selenider_element c(...)  # S3 method for selenider_elements c(...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple HTML elements — elem_flatten","text":"... <dynamic-dots> selenider_element selenider_elements objects combined, lists objects.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple HTML elements — elem_flatten","text":"selenider_elements object.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple HTML elements — elem_flatten","text":"","code":"html <- \" <div id='id1'><\/div> <div class='.class2'><\/div> <button id='button1'>Click me!<\/button> <div class='button-container'>   <button id='button2'>No, click me!<\/button> <\/div> \"  session <- minimal_selenider_session(html)  button_1 <- s(\"#button1\") button_2 <- s(\"#button2\")  buttons <- elem_flatten(button_1, button_2)  buttons |>   elem_expect_all(is_enabled)  buttons |>   as.list() |>   lapply(elem_click)  # Doesn't just have to be single elements first_2_divs <- ss(\"div\")[1:2]  elem_flatten(first_2_divs, button_2) |>   length()  # We would like to use multiple css selectors and combine the results selectors <- c(   \"#id1\", # Will select 1 element   \"button\", # Will select 2 elements   \"p\" # Will select 0 elements )  lapply(selectors, ss) |>   elem_flatten() |>   length() # 3  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_hover.html","id":null,"dir":"Reference","previous_headings":"","what":"Hover over an element — elem_hover","title":"Hover over an element — elem_hover","text":"Move mouse HTML element hover , without actually clicking interacting .","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_hover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hover over an element — elem_hover","text":"","code":"elem_hover(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_hover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hover over an element — elem_hover","text":"x selenider_element object. js Whether hover element using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_hover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hover over an element — elem_hover","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_hover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hover over an element — elem_hover","text":"","code":"html <- \" <button onmouseover = settext()> <\/button> <p class = 'text'><\/p> \"  js <- \" function settext() {   document.getElementsByClassName('text').item(0).innerHTML = 'Button hovered!' } \"  session <- minimal_selenider_session(html, js = js)  elem_expect(s(\".text\"), has_exact_text(\"\"))  s(\"button\") |>   elem_hover()  elem_expect(s(\".text\"), has_text(\"Button hovered!\"))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the tag name of an element — elem_name","title":"Get the tag name of an element — elem_name","text":"Get tag name (e.g. \"p\" <p> tag) selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the tag name of an element — elem_name","text":"","code":"elem_name(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the tag name of an element — elem_name","text":"x selenider_element object. timeout time wait x exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the tag name of an element — elem_name","text":"string.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the tag name of an element — elem_name","text":"","code":"html <- \" <div class='mydiv'><\/div> \" session <- minimal_selenider_session(html)  s(\".mydiv\") |>   elem_name()  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_scroll_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Scroll to an element — elem_scroll_to","title":"Scroll to an element — elem_scroll_to","text":"Scrolls HTML element.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_scroll_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scroll to an element — elem_scroll_to","text":"","code":"elem_scroll_to(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_scroll_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scroll to an element — elem_scroll_to","text":"x selenider_element object. js Whether scroll element using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_scroll_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scroll to an element — elem_scroll_to","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_scroll_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scroll to an element — elem_scroll_to","text":"","code":"html <- \" <div style = 'height:100%; min-height:100vh'><\/div> <button onclick='checkScrolled()'><\/button> <p>Scroll down to find me!<\/p> \"  js <- \" function checkScrolled() {   let element = document.getElementsByTagName('p').item(0);   let rect = element.getBoundingClientRect();   // If paragraph is in view   if (rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)) {     element.innerText = 'You found me!';   } } \"  session <- minimal_selenider_session(html, js = js)  s(\"p\") |>   elem_scroll_to()  s(\"button\") |>   elem_click()  elem_expect(s(\"p\"), has_text(\"You found me!\"))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_set_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the value of an input — elem_set_value","title":"Set the value of an input — elem_set_value","text":"elem_set_value() sets value HTML input element string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_set_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the value of an input — elem_set_value","text":"","code":"elem_set_value(x, text, timeout = NULL)  elem_send_keys(x, ..., modifiers = NULL, timeout = NULL)  elem_clear_value(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_set_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the value of an input — elem_set_value","text":"x selenider_element object. elem_send_keys(), can NULL, meaning keys sent current page (currently focused element) instead specific element. text string set value input element . timeout long wait element exist. ... set inputs send x. modifiers character vector; one \"shift\", \"ctrl\"/\"control\", \"alt\", \"command\"/meta\". Note using chromote backend, work Mac OS.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_set_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the value of an input — elem_set_value","text":"x, invisibly.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_set_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the value of an input — elem_set_value","text":"elem_send_keys() sends set inputs element. elem_clear_value() sets value HTML element \"\", removing existing content.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_set_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the value of an input — elem_set_value","text":"","code":"html <- \" <input type='text' oninput='recordChange(event)' onkeypress='return checkEnter(event);'> <p><\/p> \"  js <- \" function recordChange(e) {   document.getElementsByTagName('p').item(0).innerText = e.target.value; }  function checkEnter(e) {   // If the key pressed was Enter   if (e.keyCode == 13) {     document.getElementsByTagName('p').item(0).innerText = 'Enter pressed!';     return false;   }   return true; } \"  session <- minimal_selenider_session(html, js = js)  elem_expect(s(\"p\"), has_exact_text(\"\"))  input <- s(\"input\")  elem_set_value(input, \"my text\")  elem_expect(s(\"p\"), has_text(\"my text\"))  elem_clear_value(input)  elem_expect(s(\"p\"), has_exact_text(\"\"))  elem_send_keys(input, keys$enter)  elem_expect(s(\"p\"), has_text(\"Enter pressed!\"))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of elements in a collection — elem_size","title":"Get the number of elements in a collection — elem_size","text":"Get number elements HTML element collection, waiting parent elements () exist returning value. length() elem_size() can used interchangeably, difference elem_size() allows specify timeout.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of elements in a collection — elem_size","text":"","code":"elem_size(x, timeout = NULL)  # S3 method for selenider_elements length(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of elements in a collection — elem_size","text":"x selenider_elements object. timeout time wait parent x () exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of elements in a collection — elem_size","text":"integer representing number elements collection.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of elements in a collection — elem_size","text":"","code":"html <- \" <div><\/div> <div><\/div> <div><\/div> <div><\/div> \" session <- minimal_selenider_session(html)  ss(\"div\") |>   length()  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_submit.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit an element — elem_submit","title":"Submit an element — elem_submit","text":"element ancestor form, submits form. Works walking DOM, checking ancestor element element <form> element, submits. element exist, error thrown.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_submit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit an element — elem_submit","text":"","code":"elem_submit(x, js = FALSE, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_submit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit an element — elem_submit","text":"x selenider_element object. js Whether submit form using JavaScript. timeout long wait element exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_submit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit an element — elem_submit","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_submit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit an element — elem_submit","text":"","code":"html <- \" <form> <input type='submit'> <p>Random text<\/p> <\/form> <a>Random link<\/a> \"  session <- minimal_selenider_session(html)  elem_submit(s(\"input\")) elem_submit(s(\"p\"))  # Won't work since the element doesn't have a form ancestor try(elem_submit(s(\"a\"), timeout = 0.5))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the text inside an element — elem_text","title":"Get the text inside an element — elem_text","text":"Get inner text selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the text inside an element — elem_text","text":"","code":"elem_text(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the text inside an element — elem_text","text":"x selenider_element object. timeout time wait x exist.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the text inside an element — elem_text","text":"string.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/elem_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the text inside an element — elem_text","text":"","code":"html <- \" <p>Example text<\/p> \"  session <- minimal_selenider_session(html)  s(\"p\") |>   elem_text()  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/execute_js_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a JavaScript function — execute_js_fn","title":"Execute a JavaScript function — execute_js_fn","text":"Execute JavaScript function zero arguments. execute_js_expr() simpler version execute_js_fn() can evaluate simple expressions (e.g. \"alert()\"). return value, must explicitly using \"return\". functions experimental names parameters liable change. Additionally, behaviour can inconsistent different session types (chromote selenium) different browsers.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/execute_js_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a JavaScript function — execute_js_fn","text":"","code":"execute_js_fn(fn, ..., .timeout = NULL, .session = NULL, .debug = FALSE)  execute_js_expr(expr, ..., .timeout = NULL, .session = NULL, .debug = FALSE)"},{"path":"https://ashbythorpe.github.io/selenider/reference/execute_js_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a JavaScript function — execute_js_fn","text":"fn string defining function. ... Arguments function/expression. must unnamed, since JavaScript support named arguments. .timeout long wait elements exist DOM. .session session use, ... contain selenider elements. .debug Whether print final expression executed. Mostly used debugging functions , can also used identify problems JavaScript code. expr expression execute.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/execute_js_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a JavaScript function — execute_js_fn","text":"return value JavaScript function, turned back R object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/execute_js_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute a JavaScript function — execute_js_fn","text":"... can contain selenider_element/selenider_elements objects, collected passed function. However, complex objects (e.g. lists selenider elements) moved JavaScript world correctly. Similarly, nodes lists nodes returned JavaScript function converted corresponding selenider_element/selenider_elements objects, complex objects . elements lazy (see elem_cache()), make sure use sure still page.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/execute_js_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a JavaScript function — execute_js_fn","text":"","code":"html <- \" <button class='mybutton'>Click me<\/button> \" session <- minimal_selenider_session(html)  execute_js_fn(\"(x, y) => x + y\", 1, 1)  execute_js_expr(\"arguments[0] + arguments[1]\", 1, 1)  execute_js_fn(\"x => x.click()\", s(\".mybutton\"))  execute_js_expr(\"arguments[0].click()\", s(\".mybutton\"))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/find_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a single HTML child element — find_element","title":"Find a single HTML child element — find_element","text":"Find first HTML element using CSS selector, XPath, variety methods.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/find_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a single HTML child element — find_element","text":"","code":"find_element(x, ...)  # S3 method for selenider_session find_element(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )  # S3 method for selenider_element find_element(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )"},{"path":"https://ashbythorpe.github.io/selenider/reference/find_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a single HTML child element — find_element","text":"x selenider session element. ... Arguments passed methods. css css selector. xpath XPath. id id element want select. class_name class name element want select. name name attribute element want select. link_text link text link element like select.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/find_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a single HTML child element — find_element","text":"selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/find_element.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find a single HTML child element — find_element","text":"one method used select element (e.g. css xpath), first element satisfies conditions found. CSS selectors generally recommended options, since usually easiest read. Use \"tag_name\" select tag name, \".class\" select class, \"#id\" select id.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/find_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a single HTML child element — find_element","text":"","code":"html <- \" <div class='class1'>   <div id='id1'>     <a href='https://r-project.org'>Click me!<\/a>   <\/div>   <p>Example text<\/p> <\/div> \"  session <- minimal_selenider_session(html)  session |>   find_element(\"div\")  session |>   find_element(name = \"div\") |>   find_element(xpath = \"./p\")  s(\"div\") |>   find_element(\"#id1\")  s(\"div\") |>   find_element(id = \"id1\") |>   find_element(link_text = \"Click me!\")  # Complex Xpath expressions are easier to read as chained CSS selectors. s(\"//div[contains(@class, 'class1')]/div/a\")  s(\"div.class1\") |>   find_element(\"div\") |>   find_element(\"a\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/find_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Find multiple HTML child elements — find_elements","title":"Find multiple HTML child elements — find_elements","text":"Find every available HTML element using CSS selector, XPath, variety methods.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/find_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find multiple HTML child elements — find_elements","text":"","code":"find_elements(x, ...)  # S3 method for selenider_session find_elements(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )  # S3 method for selenider_element find_elements(   x,   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL,   ... )"},{"path":"https://ashbythorpe.github.io/selenider/reference/find_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find multiple HTML child elements — find_elements","text":"x selenider session element. ... Arguments passed methods. css css selector. xpath XPath. id id element want select. class_name class name element want select. name name attribute element want select. link_text link text link element like select.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/find_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find multiple HTML child elements — find_elements","text":"selenider_elements object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/find_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find multiple HTML child elements — find_elements","text":"one method used select element (e.g. css xpath), first element satisfies every condition found.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/find_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find multiple HTML child elements — find_elements","text":"","code":"html <- \" <div id='outer-div'>   <div>     <p>Text 1<\/p>     <p>Text 2<\/p>     <p>Text 3<\/p>   <\/div> <\/div>  <div><\/div> \"  session <- minimal_selenider_session(html)  session |>   find_elements(\"div\")  # Or: ss(\"div\")  session |>   find_element(\"#outer-div\") |>   find_elements(\"p\")    # The above can be shortened to: s(\"#outer-div\") |>   find_elements(\"p\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the element associated with a selenider element — get_actual_element","title":"Get the element associated with a selenider element — get_actual_element","text":"Turn lazy selenium element element collection backendNodeId (chromote) RSelenium::webElement. Use perform certain actions element implemented selenider. get_actual_element() turns selenider_element object single backendNodeId RSelenium::webElement object. function wait object exist DOM. get_actual_elements() turns selenider_elements object list RSelenium::webElement objects, waiting parent objects exist DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the element associated with a selenider element — get_actual_element","text":"","code":"get_actual_element(x, timeout = NULL)  get_actual_elements(x, timeout = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the element associated with a selenider element — get_actual_element","text":"x selenider_element selenider_elements object, produced find_element() / find_elements(). timeout timeout use asserting item exists. NULL, timeout selenider_element used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the element associated with a selenider element — get_actual_element","text":"integer (backendNodeId), RSelenium::webElement object. get_actual_elements() returns list objects.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/get_actual_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the element associated with a selenider element — get_actual_element","text":"","code":"html <- \" <div> <p>Text<\/p> <p>More text<\/p> <\/div> \"  session <- minimal_selenider_session(html)  elem <- s(\"div\") |>   get_actual_element()  # The webDriver/ChromoteSession can be accessed using session$driver driver <- session$driver  if (inherits(driver, \"ChromoteSession\")) {   driver$DOM$getBoxModel(backendNodeId = elem) } else {   elem$getElementLocation() }  elems <- ss(\"p\") |>   get_actual_elements()  if (inherits(driver, \"ChromoteSession\")) {   driver$DOM$describeNode(backendNodeId = elems[[1]]) } else {   elems[[1]]$describeElement() }  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_page_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the HTML of a session — get_page_source","title":"Read the HTML of a session — get_page_source","text":"Uses xml2::read_html() read page source session","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_page_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the HTML of a session — get_page_source","text":"","code":"get_page_source(session = NULL, ...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_page_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the HTML of a session — get_page_source","text":"session Optionally, selenider_session object. ... Passed xml2::read_html()","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_page_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the HTML of a session — get_page_source","text":"XML document.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/get_page_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the HTML of a session — get_page_source","text":"","code":"html <- \" <p>Example text<\/p> \"  session <- minimal_selenider_session(html)  get_page_source()  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the local selenider session — get_session","title":"Get or set the local selenider session — get_session","text":"Change locally defined selenider_session() object, allowing used functions like s() without explicitly providing . get_session() retrieves current local session. none created, session created automatically. local_session() sets local session. function uses withr::defer() make sure session closed local session set previous value longer needed. with_session() runs code temporary local session. session closed local session set previous value code finishes executing.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the local selenider session — get_session","text":"","code":"get_session(create = TRUE, .env = rlang::caller_env())  local_session(session, .local_envir = rlang::caller_env(), close = TRUE)  with_session(session, code, close = TRUE)"},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the local selenider session — get_session","text":"create session found, create new one? FALSE session found, NULL returned. .env get_session() creates session, environment session used. session selenider_session() object use. .local_envir environment session used. function associated environment finishes execution, session reset. close close session local session reset? Set FALSE want use session even longer local session. want close session manually, use close_session(). code code run local session set.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the local selenider session — get_session","text":"get_session() returns local selenider_session() object (newly created session). local_session() returns previous local session object (NULL). running get_session() function. with_session() returns result code.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the local selenider session — get_session","text":"Use withr::deferred_run() reset local sessions set using local_session().","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/get_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the local selenider session — get_session","text":"","code":"# Don't set the local session, since we want to do it manually. session_1 <- selenider_session(local = FALSE) session_2 <- selenider_session(local = FALSE)  get_session(create = FALSE) # NULL  local_session(session_1, close = FALSE)  get_session(create = FALSE)  withr::deferred_run()  get_session(create = FALSE) # NULL  # By default, the local session is only set inside the function that it is # called. # If we want to set the local session outside the scope of a function, we # need to use the `.local_envir` argument. set_my_session <- function(env = rlang::caller_env()) {   # caller_env() is the environment where the function is called.   local_session(session_1, .local_envir = env, close = FALSE) }  set_my_session()  with_session(   session_2,   {get_session(create = FALSE)},   close = FALSE ) # session_2  get_session(create = FALSE) # session_1"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element's attribute match a value? — has_attr","title":"Does an element's attribute match a value? — has_attr","text":"has_attr() checks element's attribute matches value, attr_contains() checks element's attribute contains value. has_value() shortcut has_attr(\"value\"): checks element's value matches string number.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element's attribute match a value? — has_attr","text":"","code":"has_attr(x, name, value)  attr_contains(x, name, value)  has_value(x, value)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element's attribute match a value? — has_attr","text":"x selenider_element object. name name attribute. value value attribute. has_attr() has_value(), can string numeric value, attr_contains() can take string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element's attribute match a value? — has_attr","text":"boolean value: TRUE FALSE.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element's attribute match a value? — has_attr","text":"","code":"html <- \" <input class='myclass' value='1.0' data-customattr='Custom attribute text'><\/p> \"  session <- minimal_selenider_session(html)  has_attr(s(\"input\"), \"class\", \"myclass\")  has_attr(s(\"input\"), \"value\", 1) has_value(s(\"input\"), 1)  attr_contains(s(\"input\"), \"data-customattr\", \"Custom attribute\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element's css property match a value? — has_css_property","title":"Does an element's css property match a value? — has_css_property","text":"Check CSS property (e.g. \"background-color\") element matches value.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element's css property match a value? — has_css_property","text":"","code":"has_css_property(x, property, value)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element's css property match a value? — has_css_property","text":"x selenider_element object. property name CSS property value value attribute.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element's css property match a value? — has_css_property","text":"boolean value: TRUE FALSE.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_css_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element's css property match a value? — has_css_property","text":"","code":"html <- \" <div style='display:none;'><\/div> \" session <- minimal_selenider_session(html)  has_css_property(s(\"div\"), \"display\", \"none\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a collection have a certain number of elements? — has_length","title":"Does a collection have a certain number of elements? — has_length","text":"has_length() has_size() checks collection HTML elements contains certain number elements.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a collection have a certain number of elements? — has_length","text":"","code":"has_length(x, n)  has_size(x, n)  has_at_least(x, n)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a collection have a certain number of elements? — has_length","text":"x selenider_elements object. n numeric vector possible lengths x. has_at_least(), must single number compare length x.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a collection have a certain number of elements? — has_length","text":"boolean value: TRUE FALSE","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does a collection have a certain number of elements? — has_length","text":"has_at_least() checks collection contains least n elements. functions implement retry mechanism, test condition . Use elem_expect() elem_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a collection have a certain number of elements? — has_length","text":"","code":"html <- \" <div class='div1'><\/div> <div class='div2'><\/div> <div class='div3'><\/div> \" session <- minimal_selenider_session(html)  has_length(ss(\"div\"), 3) has_at_least(ss(\"div\"), 2)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element have a tag name? — has_name","title":"Does an element have a tag name? — has_name","text":"Check element specified tag name","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element have a tag name? — has_name","text":"","code":"has_name(x, name)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element have a tag name? — has_name","text":"x selenider_element object. name string.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element have a tag name? — has_name","text":"boolean value.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element have a tag name? — has_name","text":"","code":"html <- \" <div id='mydiv'><\/div> \" session <- minimal_selenider_session(html)  has_name(s(\"#mydiv\"), \"p\")  has_name(s(\"#mydiv\"), \"div\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element contain a pattern? — has_text","title":"Does an element contain a pattern? — has_text","text":"has_text() checks element's inner text contains string, has_exact_text() checks inner text contains string. functions throw error element exist DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element contain a pattern? — has_text","text":"","code":"has_text(x, text)  has_exact_text(x, text)"},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element contain a pattern? — has_text","text":"x selenider_element object. text string, used test element's inner text.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element contain a pattern? — has_text","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does an element contain a pattern? — has_text","text":"functions implement retry mechanism, test condition . Use elem_expect() elem_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/has_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element contain a pattern? — has_text","text":"","code":"html <- \" <p>Example text<\/p> <p class='empty'><\/p> \"  session <- minimal_selenider_session(html)  has_text(s(\"p\"), \"Example\") # TRUE  has_exact_text(s(\"p\"), \"Example\") # FALSE  has_exact_text(s(\"p\"), \"Example text\") # TRUE  # has_exact_text() is useful for checking when there is no text, # since has_text(\"\") will always be TRUE. has_exact_text(s(\".empty\"), \"\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an element enabled? — is_enabled","title":"Is an element enabled? — is_enabled","text":"is_disabled() checks element disabled attribute set TRUE, is_enabled() checks . functions throw error element exist DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an element enabled? — is_enabled","text":"","code":"is_enabled(x)  is_disabled(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an element enabled? — is_enabled","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an element enabled? — is_enabled","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an element enabled? — is_enabled","text":"functions implement retry mechanism, test condition . Use elem_expect() elem_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/is_enabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an element enabled? — is_enabled","text":"","code":"html <- \" <button><\/button> <button disabled><\/button> \"  session <- minimal_selenider_session(html)  is_enabled(s(\"button\")) # TRUE  is_disabled(ss(\"button\")[[2]]) # TRUE  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":null,"dir":"Reference","previous_headings":"","what":"Does an element exist? — is_present","title":"Does an element exist? — is_present","text":"is_present() is_in_dom() checks element present page, is_missing() is_absent() checks opposite.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does an element exist? — is_present","text":"","code":"is_present(x)  is_in_dom(x)  is_absent(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does an element exist? — is_present","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does an element exist? — is_present","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does an element exist? — is_present","text":"functions implement retry mechanism, test condition . Use elem_expect() elem_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/is_present.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does an element exist? — is_present","text":"","code":"html <- \" <p class='class1'><\/p> \"  session <- minimal_selenider_session(html)  is_present(s(\".class1\")) # TRUE  is_in_dom(s(\".class2\")) # FALSE  is_absent(s(\".class2\")) # TRUE  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an element visible? — is_visible","title":"Is an element visible? — is_visible","text":"is_visible() is_displayed() checks element can seen page, is_invisible() is_hidden() checks opposite. functions throw error element DOM.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an element visible? — is_visible","text":"","code":"is_visible(x)  is_displayed(x)  is_hidden(x)  is_invisible(x)"},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an element visible? — is_visible","text":"x selenider_element object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an element visible? — is_visible","text":"boolean value: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an element visible? — is_visible","text":"functions implement retry mechanism, test condition . Use elem_expect() elem_wait_until() use conditions tests.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/is_visible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an element visible? — is_visible","text":"","code":"html <- \" <div style='visibility:hidden;'>Content 1<\/div> <div style='display:none'>Content 2<\/div> <div>Content 3<\/div> \"  session <- minimal_selenider_session(html)  is_visible(s(\"div\")) # FALSE  is_invisible(ss(\"div\")[[2]]) # TRUE  is_visible(ss(\"div\")[[3]]) # TRUE  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Special keys — keys","title":"Special keys — keys","text":"List special keys, use elem_send_keys().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special keys — keys","text":"","code":"keys"},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Special keys — keys","text":"list containing selenider_key objects.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Special keys — keys","text":"","code":"keys$backspace"},{"path":"https://ashbythorpe.github.io/selenider/reference/minimal_selenider_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a session with custom HTML — minimal_selenider_session","title":"Create a session with custom HTML — minimal_selenider_session","text":"Create selenider_session using custom HTML/JavaScript.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/minimal_selenider_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a session with custom HTML — minimal_selenider_session","text":"","code":"minimal_selenider_session(html, js = NULL, ..., .env = rlang::caller_env())"},{"path":"https://ashbythorpe.github.io/selenider/reference/minimal_selenider_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a session with custom HTML — minimal_selenider_session","text":"html string use HTML. Can also xml2 object. js string (NULL) use JavaScript. ... Passed selenider_session(). .env environment session used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/minimal_selenider_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a session with custom HTML — minimal_selenider_session","text":"selenider_session object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/minimal_selenider_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a session with custom HTML — minimal_selenider_session","text":"function works combining html js single string, writing temporary file (opening session's browser).","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/minimal_selenider_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a session with custom HTML — minimal_selenider_session","text":"","code":"session <- minimal_selenider_session(\"<p>Example<\/p>\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a URL — open_url","title":"Open a URL — open_url","text":"Navigate browser specified URL, waiting page considered open finishing.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a URL — open_url","text":"","code":"open_url(url, session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a URL — open_url","text":"url URL navigate : string. session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a URL — open_url","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/open_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a URL — open_url","text":"","code":"session <- selenider_session()  open_url(\"https://r-project.org\")  # Or: open_url(session = session, \"https://r-project.org\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/read_html.selenider_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a live HTML document — read_html.selenider_session","title":"Read a live HTML document — read_html.selenider_session","text":"xml2::read_html() can used selenider session read HTML entire page, selenider element get HTML element.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/read_html.selenider_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a live HTML document — read_html.selenider_session","text":"","code":"read_html.selenider_session(   x,   encoding = \"\",   ...,   options = c(\"RECOVER\", \"NOERROR\", \"NOBLANKS\") )  read_html.selenider_element(   x,   encoding = \"\",   timeout = NULL,   outer = TRUE,   ...,   options = c(\"RECOVER\", \"NOERROR\", \"NOBLANKS\") )"},{"path":"https://ashbythorpe.github.io/selenider/reference/read_html.selenider_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a live HTML document — read_html.selenider_session","text":"x selenider_session/selenider_element object. encoding, ..., options Passed xml2::read_html(). timeout long wait x exist DOM throwing error. outer Whether read inner (children current element) outer (including element ) HTML x.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/read_html.selenider_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a live HTML document — read_html.selenider_session","text":"read_html() returns XML document. Note HTML always wrapped <html> <body> tag, already.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/read_html.selenider_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a live HTML document — read_html.selenider_session","text":"","code":"library(rvest)  html <- \" <div> <p>Example text<\/p> <\/div> \"  session <- minimal_selenider_session(html)  read_html(session) read_html(s(\"div\"))  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":null,"dir":"Reference","previous_headings":"","what":"Reload the current page — reload","title":"Reload the current page — reload","text":"reload() refresh() reload current page.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reload the current page — reload","text":"","code":"reload(session = NULL)  refresh(session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reload the current page — reload","text":"session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reload the current page — reload","text":"session object, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/reload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reload the current page — reload","text":"","code":"session <- selenider_session()  open_url(\"https://r-project.org\")  reload()  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":null,"dir":"Reference","previous_headings":"","what":"Select HTML elements — s","title":"Select HTML elements — s","text":"s() ss() allow select elements without specifying session object. s() selects single element, shorthand find_element() current session. ss() selects multiple elements, shorthand find_elements().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select HTML elements — s","text":"","code":"s(   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL )  ss(   css = NULL,   xpath = NULL,   id = NULL,   class_name = NULL,   name = NULL,   link_text = NULL )"},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select HTML elements — s","text":"css css selector. xpath XPath. id id element want select. class_name class name element want select. name name attribute element want select. link_text link text link element like select.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select HTML elements — s","text":"s() returns selenider_element object. ss() returns selenider_elements object.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select HTML elements — s","text":"functions allow starting point chains selectors made concise. use get_session() get global session object.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select HTML elements — s","text":"","code":"html <- \" <div> <p id='id1' class='inner'><\/p> <div class='child'> <p class='inner'><\/p> <\/div> <\/div> \"  session <- minimal_selenider_session(html)  s(\"#id1\")  # This is the equivalent of: find_element(session, \"id1\")  ss(\".inner\")  # This is the equivalent of: find_element(session, \".inner\")  # This provides a more concise way to begin a chain of selectors s(\"div\") |>   find_element(\".child\") |>   find_element(\".inner\")  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider-config.html","id":null,"dir":"Reference","previous_headings":"","what":"Selenider options — selenider-config","title":"Selenider options — selenider-config","text":"selenider options, allowing specify session browser use without tell selenider_session() information every time. selenider.session - package use backend: either \"chromote\" \"selenium\". selenider.browser - name browser run session ; one \"chrome\", \"firefox\", \"phantomjs\" \"internet explorer\" (Windows).","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"selenider: Concise, Lazy and Reliable Wrapper for 'chromote' and 'RSelenium' — selenider-package","title":"selenider: Concise, Lazy and Reliable Wrapper for 'chromote' and 'RSelenium' — selenider-package","text":"user-friendly wrapper web automation, using either 'chromote' 'RSelenium'. Provides simple consistent API make web scraping testing scripts easy write understand. Elements lazy, automatically wait website valid, resulting reliable reproducible code, visible impact experience programmer.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"selenider: Concise, Lazy and Reliable Wrapper for 'chromote' and 'RSelenium' — selenider-package","text":"Maintainer: Ashby Thorpe ashbythorpe@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if selenider can be used — selenider_available","title":"Check if selenider can be used — selenider_available","text":"Checks selenider's dependencies available, environment makes sense open selenider session. skip_if_selenider_unavailable() skips testthat test selenider_available() returns FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if selenider can be used — selenider_available","text":"","code":"selenider_available(session = c(\"chromote\", \"selenium\"), online = TRUE)  skip_if_selenider_unavailable(session = c(\"chromote\", \"selenium\"))"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if selenider can be used — selenider_available","text":"session session check. \"chromote\" used default. online Whether need check internet connection.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if selenider can be used — selenider_available","text":"boolean flag: TRUE FALSE.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_available.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if selenider can be used — selenider_available","text":"Specifically, following checked: SELENIDER_AVAILABLE environment variable. Set \"TRUE\" \"FALSE\" override function. Whether CRAN (using NOT_CRAN environment variable). , function returns FALSE. Whether internet connection available (using curl::nslookup()). session \"chromote\", also check: Whether chromote installed. Whether chromote::find_chrome() error. session \"selenium\", check: Whether RSelenium installed. Whether can find valid browser supported RSelenium.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if selenider can be used — selenider_available","text":"","code":"selenider_available()"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up after an example — selenider_cleanup","title":"Clean up after an example — selenider_cleanup","text":"Clean selenider example, making sure deferred events run.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up after an example — selenider_cleanup","text":"","code":"selenider_cleanup(env = rlang::caller_env())"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up after an example — selenider_cleanup","text":"env environment deferred events contained.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up after an example — selenider_cleanup","text":"Nothing","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a session — selenider_session","title":"Start a session — selenider_session","text":"Begin session selenider, setting local session unless otherwise specified, allowing session accessed globally environment defined. create_chromote_session(), create_selenium_client() create_selenium_server() low-level functions allow control making web driver, can passed driver argument selenider_session().","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a session — selenider_session","text":"","code":"selenider_session(   session = getOption(\"selenider.session\"),   browser = getOption(\"selenider.browser\"),   view = FALSE,   timeout = 4,   driver = NULL,   local = TRUE,   quiet = TRUE,   .env = rlang::caller_env() )  create_chromote_session(...)  create_selenium_server(   browser,   version = \"latest\",   port = 4567L,   quiet = TRUE,   ... )  create_selenium_client(browser, port = 4567L, ...)"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a session — selenider_session","text":"session package use backend: either \"chromote\" \"selenium\". default, chromote used, since tends faster reliable. Change default value using selenider.session option. browser name browser run session ; one \"chrome\", \"firefox\", \"phantomjs\" \"internet explorer\" (Windows). NULL, function try work browser installed. using chromote, option ignored, since chromote works Chrome. Change default value parameter using selenider.browser option. view Whether open browser view , visual testing. ignored session \"selenium\", since selenium drivers headless. timeout default time wait collecting element. driver driver object use instead creating one manually. can one : chromote::ChromoteSession object (result create_chromote_session()). shinytest2::AppDriver object. RSelenium::remoteDriver() object (result create_selenium_client()). Selenium server object (result wdman::selenium(), create_selenium_server()). case, client object created using server object. list/environment containing RSelenium::remoteDriver() object, Selenium server object, . See Details information providing custom driver object. local Whether set session local session object, using local_session(). quiet Whether let RSelenium::rsDriver() display messages. default, output suppressed, usually useful. Chromote display output creating session. .env Passed local_session() function, define environment session used. Change want create session inside function use outside function. ... Arguments finetune creation specific driver. create_chromote_session(), passed chromote::ChromoteSession$new(). create_selenium_server(), passed wdman::selenium(). create_selenium_server(), passed RSelenium::remoteDriver(). version version webdriver (chromedriver, geckodriver, etc.) use. need change Chrome used, version driver depends version Chrome. port port run Selenium .","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a session — selenider_session","text":"selenider_session object. Use session$driver retrieve driver object controls browser.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"structure-of-a-selenider-session","dir":"Reference","previous_headings":"","what":"Structure of a selenider session","title":"Start a session — selenider_session","text":"selenider_session object S3 list, meaning properties can accessed using $. notably, using session$driver allows access driver object actually controls browser. using Selenium, use session$driver$client access remoteDriver object. objects useful want something driver directly supported selenider. See get_actual_element() examples .","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"custom-drivers","dir":"Reference","previous_headings":"","what":"Custom drivers","title":"Start a session — selenider_session","text":"Custom driver objects good want low-level control underlying functions create webdrivers actually control browser. However, recommended use selenider functions (e.g. create_selenium_client()) wdman::selenium() better error messages reliable behaviour. See `vignette(\"unit-testing\", package = \"selenider\") information using selenider docker/Github Actions.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"chromote","dir":"Reference","previous_headings":"","what":"Chromote","title":"Start a session — selenider_session","text":"Supplying custom chromote::ChromoteSession object can allow manage underlying chromote::Chromote process used spawn sessions. example:   can also supply shinytest2::AppDriver object, allowing selenider shinytest2 share session:","code":"my_chromote_object <- chromote::Chromote$new()  session <- selenider_session(   driver = create_chromote_session(parent = my_chromote_object) ) shiny_app <- shiny::shinyApp(   ui = shiny::fluidPage(     # ... Your UI   ),   server = function(input, output) {     # ... Your server   } )  app <- shinytest2::AppDriver$new()  session <- selenider_session(   driver = app )"},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"rselenium","dir":"Reference","previous_headings":"","what":"RSelenium","title":"Start a session — selenider_session","text":"want manually create client server, can equivalent following:   However, can sometimes useful omit server, example running Selenium server using Docker. case, need make sure ip port matched correctly.","code":"session <- selenider_session(   driver = list(     client = create_selenium_client(\"chrome\"),     server = create_selenium_server(\"chrome\")   ) ) session <- selenider_session(   driver = create_selenium_client(     remoteServerAddr = \"<IP ADDRESS>\",     port = 1234L   ) )"},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/selenider_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a session — selenider_session","text":"","code":"session_1 <- selenider_session(timeout = 10) # session_1 is the local session here  get_session() # Returns session 1  my_function <- function() {   session_2 <- selenider_session()    # In here, session_2 is the local session   get_session() } # When the function finishes executing, the session is closed  my_function() # Returns `session_2`  # If we want to use a session outside the scope of a function, # we need to use the `.env` argument. create_session <- function(timeout = 10, .env = rlang::caller_env()) {   # caller_env() is the environment where the function is called   selenider_session(timeout = timeout, .env = .env) }  my_session <- create_session()  # We can now use this session outside the `create_session()` function get_session()  # `my_session` will be closed automatically.  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a screenshot of the current page — take_screenshot","title":"Take a screenshot of the current page — take_screenshot","text":"Take screenshot current session state, saving image file.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a screenshot of the current page — take_screenshot","text":"","code":"take_screenshot(file = NULL, view = FALSE, session = NULL)"},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a screenshot of the current page — take_screenshot","text":"file file path save screenshot . view Whether open interactively view screenshot. TRUE file NULL, screenshot deleted viewing. session `selenider_session object. specified, global session object (result get_session()) used.","code":""},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a screenshot of the current page — take_screenshot","text":"file, NULL. Otherwise, session object returned, invisibly.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/reference/take_screenshot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take a screenshot of the current page — take_screenshot","text":"","code":"session <- selenider_session()  open_url(\"https://www.google.com\")  file_path <- withr::local_tempfile(fileext = \"png\")  take_screenshot(file_path)  # \\dontshow{ # Clean up all connections and invalidate default chromote object selenider_cleanup() # }"},{"path":[]},{"path":"https://ashbythorpe.github.io/selenider/news/index.html","id":"selenider-012","dir":"Changelog","previous_headings":"","what":"selenider 0.1.2","title":"selenider 0.1.2","text":"CRAN release: 2023-10-01 Responded CRAN review.","code":""},{"path":"https://ashbythorpe.github.io/selenider/news/index.html","id":"selenider-011","dir":"Changelog","previous_headings":"","what":"selenider 0.1.1","title":"selenider 0.1.1","text":"Fixed issue empty vignette.","code":""},{"path":"https://ashbythorpe.github.io/selenider/news/index.html","id":"selenider-010","dir":"Changelog","previous_headings":"","what":"selenider 0.1.0","title":"selenider 0.1.0","text":"Initial CRAN submission.","code":""}]
